// Code generated by sqlc. DO NOT EDIT.
// source: tsdata.sql

package postgresql

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createTsData = `-- name: CreateTsData :one
SELECT
	COUNT(*) AS count
FROM tsdata_insert(
  $1,
  $2,
  $3,
  $4
) AS tsdata_insert
`

type CreateTsDataParams struct {
	TsUuid    uuid.UUID
	Value     float64
	Ts        time.Time
	CreatedBy uuid.UUID
}

func (q *Queries) CreateTsData(ctx context.Context, arg CreateTsDataParams) (int64, error) {
	row := q.queryRow(ctx, q.createTsDataStmt, createTsData,
		arg.TsUuid,
		arg.Value,
		arg.Ts,
		arg.CreatedBy,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteAllTsData = `-- name: DeleteAllTsData :execrows
DELETE FROM tsdata
WHERE ts_uuid = ANY($1)
`

func (q *Queries) DeleteAllTsData(ctx context.Context, tsUuid uuid.UUID) (int64, error) {
	result, err := q.exec(ctx, q.deleteAllTsDataStmt, deleteAllTsData, tsUuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteTsDataRange = `-- name: DeleteTsDataRange :execrows
DELETE FROM tsdata
WHERE ts_uuid = ANY($1::uuid[])
AND ts BETWEEN $2 AND $3
AND ($4::boolean = true OR tsdata.value >= $5)
AND ($6::boolean = true OR tsdata.value <= $7)
`

type DeleteTsDataRangeParams struct {
	TsUuids []uuid.UUID
	Start   time.Time
	Stop    time.Time
	GeNull  bool
	Ge      float64
	LeNull  bool
	Le      float64
}

func (q *Queries) DeleteTsDataRange(ctx context.Context, arg DeleteTsDataRangeParams) (int64, error) {
	result, err := q.exec(ctx, q.deleteTsDataRangeStmt, deleteTsDataRange,
		pq.Array(arg.TsUuids),
		arg.Start,
		arg.Stop,
		arg.GeNull,
		arg.Ge,
		arg.LeNull,
		arg.Le,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getTsDataRange = `-- name: GetTsDataRange :many
SELECT	ts_uuid,
	value,
	ts
FROM tsdata
WHERE ts_uuid = ANY($1::uuid[])
AND ts BETWEEN $2 AND $3
ORDER BY ts ASC
`

type GetTsDataRangeParams struct {
	TsUuids []uuid.UUID
	Start   time.Time
	Stop    time.Time
}

type GetTsDataRangeRow struct {
	TsUuid uuid.UUID
	Value  float64
	Ts     time.Time
}

func (q *Queries) GetTsDataRange(ctx context.Context, arg GetTsDataRangeParams) ([]GetTsDataRangeRow, error) {
	rows, err := q.query(ctx, q.getTsDataRangeStmt, getTsDataRange, pq.Array(arg.TsUuids), arg.Start, arg.Stop)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTsDataRangeRow{}
	for rows.Next() {
		var i GetTsDataRangeRow
		if err := rows.Scan(&i.TsUuid, &i.Value, &i.Ts); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
