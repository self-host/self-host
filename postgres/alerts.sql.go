// Code generated by sqlc. DO NOT EDIT.
// source: alerts.sql

package postgres

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createAlert = `-- name: CreateAlert :one
SELECT  alert_merge(
        $1::text,
        $2::text,
        $3::text,
        $4::text,
        $5::alert_severity,
        $6::alert_status,
	$7::text[],
        $8::text,
        $9::text,
	$10::text[],
	$11::integer,
	$12::bytea
)::UUID AS uuid LIMIT 1
`

type CreateAlertParams struct {
	Resource    string
	Environment string
	Event       string
	Origin      string
	Severity    AlertSeverity
	Status      AlertStatus
	Service     []string
	Value       string
	Description string
	Tags        []string
	Timeout     int32
	Rawdata     []byte
}

func (q *Queries) CreateAlert(ctx context.Context, arg CreateAlertParams) (uuid.UUID, error) {
	row := q.queryRow(ctx, q.createAlertStmt, createAlert,
		arg.Resource,
		arg.Environment,
		arg.Event,
		arg.Origin,
		arg.Severity,
		arg.Status,
		pq.Array(arg.Service),
		arg.Value,
		arg.Description,
		pq.Array(arg.Tags),
		arg.Timeout,
		arg.Rawdata,
	)
	var uuid uuid.UUID
	err := row.Scan(&uuid)
	return uuid, err
}

const deleteAlert = `-- name: DeleteAlert :execrows
DELETE FROM alerts
WHERE alerts.uuid = $1
`

func (q *Queries) DeleteAlert(ctx context.Context, uuid uuid.UUID) (int64, error) {
	result, err := q.exec(ctx, q.deleteAlertStmt, deleteAlert, uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const existsAlert = `-- name: ExistsAlert :one
SELECT COUNT(*) AS count
FROM alerts
WHERE uuid = $1
`

func (q *Queries) ExistsAlert(ctx context.Context, uuid uuid.UUID) (int64, error) {
	row := q.queryRow(ctx, q.existsAlertStmt, existsAlert, uuid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const findAlertByUUID = `-- name: FindAlertByUUID :one
SELECT uuid, resource, environment, event, severity, previous_severity, status, description, value, origin, created, last_receive_time, timeout, duplicate, service, tags, rawdata
FROM v_alerts
WHERE uuid = $1
`

func (q *Queries) FindAlertByUUID(ctx context.Context, uuid uuid.UUID) (VAlert, error) {
	row := q.queryRow(ctx, q.findAlertByUUIDStmt, findAlertByUUID, uuid)
	var i VAlert
	err := row.Scan(
		&i.Uuid,
		&i.Resource,
		&i.Environment,
		&i.Event,
		&i.Severity,
		&i.PreviousSeverity,
		&i.Status,
		&i.Description,
		&i.Value,
		&i.Origin,
		&i.Created,
		&i.LastReceiveTime,
		&i.Timeout,
		&i.Duplicate,
		pq.Array(&i.Service),
		pq.Array(&i.Tags),
		&i.Rawdata,
	)
	return i, err
}

const findAlerts = `-- name: FindAlerts :many
WITH severity_levels AS (
	SELECT name::alert_severity, level::int FROM (
		VALUES
			('security', 0),
			('critical', 1),
			('major', 2),
			('minor', 3),
			('warning', 4),
			('informational', 5),
			('debug', 6),
			('trace', 7),
			('indeterminate', 8)
	) AS x(name, level)
)
SELECT
	v_alerts.created,
	v_alerts.description,
	v_alerts.duplicate,
	v_alerts.environment,
	v_alerts.event,
	v_alerts.last_receive_time,
	v_alerts.origin,
	v_alerts.previous_severity,
	v_alerts.rawdata,
	v_alerts.resource,
	v_alerts.service,
	v_alerts.severity,
	v_alerts.status,
	v_alerts.tags,
	v_alerts.timeout,
	v_alerts.uuid,
	v_alerts.value
FROM v_alerts, severity_levels
WHERE v_alerts.severity = severity_levels.name
AND (
	NULLIF($1::TEXT, '') IS NULL
	OR
	$1::TEXT = v_alerts.resource
)
AND (
	NULLIF($2::TEXT, '') IS NULL
	OR
	$2::TEXT = v_alerts.environment
)
AND (
	NULLIF($3::TEXT, '') IS NULL
	OR
	$3::TEXT = v_alerts.event
)
AND (
	NULLIF($4::TEXT, '') IS NULL
	OR
	$4::TEXT = v_alerts.origin
)
AND (
	NULLIF($5::TEXT, '') IS NULL
	OR
	$5::TEXT = v_alerts.status::TEXT
)
AND (
	NULLIF($6::TEXT, '') IS NULL
	OR
	(
		SELECT level
		FROM severity_levels
		WHERE name::TEXT = $6::TEXT
	) <= severity_levels.level
)
AND (
	NULLIF($7::TEXT, '') IS NULL
	OR
	(
		SELECT level
		FROM severity_levels
		WHERE name::TEXT = $7::TEXT
	) >= severity_levels.level
)
AND (
	NULLIF($8::TEXT, '') IS NULL
	OR
	(
		SELECT level
		FROM severity_levels
		WHERE name::TEXT = $8::TEXT
	) = severity_levels.level
)
AND (
	NULLIF($9::TEXT[], ARRAY[]::TEXT[]) IS NULL
	OR
	$9::TEXT[] && v_alerts.service
)
AND (
	NULLIF($10::TEXT[], ARRAY[]::TEXT[]) IS NULL
	OR
	$10::TEXT[] && v_alerts.tags
)
ORDER BY resource, environment, event
LIMIT $12::BIGINT
OFFSET $11::BIGINT
`

type FindAlertsParams struct {
	Resource    string
	Environment string
	Event       string
	Origin      string
	Status      string
	SeverityLe  string
	SeverityGe  string
	SeverityEq  string
	Service     []string
	Tags        []string
	ArgOffset   int64
	ArgLimit    int64
}

type FindAlertsRow struct {
	Created          time.Time
	Description      string
	Duplicate        int32
	Environment      string
	Event            string
	LastReceiveTime  sql.NullTime
	Origin           string
	PreviousSeverity AlertSeverity
	Rawdata          []byte
	Resource         string
	Service          []string
	Severity         AlertSeverity
	Status           AlertStatus
	Tags             []string
	Timeout          int32
	Uuid             uuid.UUID
	Value            string
}

func (q *Queries) FindAlerts(ctx context.Context, arg FindAlertsParams) ([]FindAlertsRow, error) {
	rows, err := q.query(ctx, q.findAlertsStmt, findAlerts,
		arg.Resource,
		arg.Environment,
		arg.Event,
		arg.Origin,
		arg.Status,
		arg.SeverityLe,
		arg.SeverityGe,
		arg.SeverityEq,
		pq.Array(arg.Service),
		pq.Array(arg.Tags),
		arg.ArgOffset,
		arg.ArgLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindAlertsRow{}
	for rows.Next() {
		var i FindAlertsRow
		if err := rows.Scan(
			&i.Created,
			&i.Description,
			&i.Duplicate,
			&i.Environment,
			&i.Event,
			&i.LastReceiveTime,
			&i.Origin,
			&i.PreviousSeverity,
			&i.Rawdata,
			&i.Resource,
			pq.Array(&i.Service),
			&i.Severity,
			&i.Status,
			pq.Array(&i.Tags),
			&i.Timeout,
			&i.Uuid,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAlertIncDuplicate = `-- name: UpdateAlertIncDuplicate :execrows
UPDATE alerts
SET duplicate = duplicate + 1
WHERE uuid = $1
`

func (q *Queries) UpdateAlertIncDuplicate(ctx context.Context, uuid uuid.UUID) (int64, error) {
	result, err := q.exec(ctx, q.updateAlertIncDuplicateStmt, updateAlertIncDuplicate, uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateAlertSetDescription = `-- name: UpdateAlertSetDescription :execrows
UPDATE alerts
SET description = $1
WHERE uuid = $2
`

type UpdateAlertSetDescriptionParams struct {
	Description string
	Uuid        uuid.UUID
}

func (q *Queries) UpdateAlertSetDescription(ctx context.Context, arg UpdateAlertSetDescriptionParams) (int64, error) {
	result, err := q.exec(ctx, q.updateAlertSetDescriptionStmt, updateAlertSetDescription, arg.Description, arg.Uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateAlertSetEnvironment = `-- name: UpdateAlertSetEnvironment :execrows
UPDATE alerts
SET environment = $1
WHERE uuid = $2
`

type UpdateAlertSetEnvironmentParams struct {
	Environment string
	Uuid        uuid.UUID
}

func (q *Queries) UpdateAlertSetEnvironment(ctx context.Context, arg UpdateAlertSetEnvironmentParams) (int64, error) {
	result, err := q.exec(ctx, q.updateAlertSetEnvironmentStmt, updateAlertSetEnvironment, arg.Environment, arg.Uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateAlertSetEvent = `-- name: UpdateAlertSetEvent :execrows
UPDATE alerts
SET event = $1
WHERE uuid = $2
`

type UpdateAlertSetEventParams struct {
	Event string
	Uuid  uuid.UUID
}

func (q *Queries) UpdateAlertSetEvent(ctx context.Context, arg UpdateAlertSetEventParams) (int64, error) {
	result, err := q.exec(ctx, q.updateAlertSetEventStmt, updateAlertSetEvent, arg.Event, arg.Uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateAlertSetLastReceivedTime = `-- name: UpdateAlertSetLastReceivedTime :execrows
UPDATE alerts
SET last_receive_time = NOW()
WHERE uuid = $1
`

func (q *Queries) UpdateAlertSetLastReceivedTime(ctx context.Context, uuid uuid.UUID) (int64, error) {
	result, err := q.exec(ctx, q.updateAlertSetLastReceivedTimeStmt, updateAlertSetLastReceivedTime, uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateAlertSetOrigin = `-- name: UpdateAlertSetOrigin :execrows
UPDATE alerts
SET origin = $1
WHERE uuid = $2
`

type UpdateAlertSetOriginParams struct {
	Origin string
	Uuid   uuid.UUID
}

func (q *Queries) UpdateAlertSetOrigin(ctx context.Context, arg UpdateAlertSetOriginParams) (int64, error) {
	result, err := q.exec(ctx, q.updateAlertSetOriginStmt, updateAlertSetOrigin, arg.Origin, arg.Uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateAlertSetRawdata = `-- name: UpdateAlertSetRawdata :execrows
UPDATE alerts
SET rawdata = $1
WHERE uuid = $2
`

type UpdateAlertSetRawdataParams struct {
	Rawdata []byte
	Uuid    uuid.UUID
}

func (q *Queries) UpdateAlertSetRawdata(ctx context.Context, arg UpdateAlertSetRawdataParams) (int64, error) {
	result, err := q.exec(ctx, q.updateAlertSetRawdataStmt, updateAlertSetRawdata, arg.Rawdata, arg.Uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateAlertSetResource = `-- name: UpdateAlertSetResource :execrows
UPDATE alerts
SET resource = $1
WHERE uuid = $2
`

type UpdateAlertSetResourceParams struct {
	Resource string
	Uuid     uuid.UUID
}

func (q *Queries) UpdateAlertSetResource(ctx context.Context, arg UpdateAlertSetResourceParams) (int64, error) {
	result, err := q.exec(ctx, q.updateAlertSetResourceStmt, updateAlertSetResource, arg.Resource, arg.Uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateAlertSetService = `-- name: UpdateAlertSetService :execrows
UPDATE alerts
SET service = $1
WHERE uuid = $2
`

type UpdateAlertSetServiceParams struct {
	Service []string
	Uuid    uuid.UUID
}

func (q *Queries) UpdateAlertSetService(ctx context.Context, arg UpdateAlertSetServiceParams) (int64, error) {
	result, err := q.exec(ctx, q.updateAlertSetServiceStmt, updateAlertSetService, pq.Array(arg.Service), arg.Uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateAlertSetSeverity = `-- name: UpdateAlertSetSeverity :execrows
UPDATE alerts
SET previous_severity = (
	SELECT severity
	FROM alerts
	WHERE alerts.uuid = $1
), severity = $2
WHERE uuid = $1
`

type UpdateAlertSetSeverityParams struct {
	Uuid     uuid.UUID
	Severity AlertSeverity
}

func (q *Queries) UpdateAlertSetSeverity(ctx context.Context, arg UpdateAlertSetSeverityParams) (int64, error) {
	result, err := q.exec(ctx, q.updateAlertSetSeverityStmt, updateAlertSetSeverity, arg.Uuid, arg.Severity)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateAlertSetStatus = `-- name: UpdateAlertSetStatus :execrows
UPDATE alerts
SET status = $1
WHERE uuid = $2
`

type UpdateAlertSetStatusParams struct {
	Status AlertStatus
	Uuid   uuid.UUID
}

func (q *Queries) UpdateAlertSetStatus(ctx context.Context, arg UpdateAlertSetStatusParams) (int64, error) {
	result, err := q.exec(ctx, q.updateAlertSetStatusStmt, updateAlertSetStatus, arg.Status, arg.Uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateAlertSetTags = `-- name: UpdateAlertSetTags :execrows
UPDATE alerts
SET tags = $1
WHERE uuid = $2
`

type UpdateAlertSetTagsParams struct {
	Tags []string
	Uuid uuid.UUID
}

func (q *Queries) UpdateAlertSetTags(ctx context.Context, arg UpdateAlertSetTagsParams) (int64, error) {
	result, err := q.exec(ctx, q.updateAlertSetTagsStmt, updateAlertSetTags, pq.Array(arg.Tags), arg.Uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateAlertSetTimeout = `-- name: UpdateAlertSetTimeout :execrows
UPDATE alerts
SET timeout = $1
WHERE uuid = $2
`

type UpdateAlertSetTimeoutParams struct {
	Timeout int32
	Uuid    uuid.UUID
}

func (q *Queries) UpdateAlertSetTimeout(ctx context.Context, arg UpdateAlertSetTimeoutParams) (int64, error) {
	result, err := q.exec(ctx, q.updateAlertSetTimeoutStmt, updateAlertSetTimeout, arg.Timeout, arg.Uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateAlertSetValue = `-- name: UpdateAlertSetValue :execrows
UPDATE alerts
SET value = $1
WHERE uuid = $2
`

type UpdateAlertSetValueParams struct {
	Value string
	Uuid  uuid.UUID
}

func (q *Queries) UpdateAlertSetValue(ctx context.Context, arg UpdateAlertSetValueParams) (int64, error) {
	result, err := q.exec(ctx, q.updateAlertSetValueStmt, updateAlertSetValue, arg.Value, arg.Uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
