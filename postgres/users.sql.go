// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package postgresql

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addTokenToUser = `-- name: AddTokenToUser :one
INSERT INTO user_tokens(user_uuid, name, token_hash)
VALUES ($1, $2, sha256($3))
RETURNING uuid, user_uuid, name, token_hash, created
`

type AddTokenToUserParams struct {
	UserUuid uuid.UUID
	Name     string
	Secret   []byte
}

func (q *Queries) AddTokenToUser(ctx context.Context, arg AddTokenToUserParams) (UserToken, error) {
	row := q.queryRow(ctx, q.addTokenToUserStmt, addTokenToUser, arg.UserUuid, arg.Name, arg.Secret)
	var i UserToken
	err := row.Scan(
		&i.Uuid,
		&i.UserUuid,
		&i.Name,
		&i.TokenHash,
		&i.Created,
	)
	return i, err
}

const addUserToGroup = `-- name: AddUserToGroup :exec
INSERT INTO user_groups(user_uuid, group_uuid)
VALUES(
	$1::uuid,
	$2::uuid
)
`

type AddUserToGroupParams struct {
	UserUuid  uuid.UUID
	GroupUuid uuid.UUID
}

func (q *Queries) AddUserToGroup(ctx context.Context, arg AddUserToGroupParams) error {
	_, err := q.exec(ctx, q.addUserToGroupStmt, addUserToGroup, arg.UserUuid, arg.GroupUuid)
	return err
}

const createUser = `-- name: CreateUser :one
WITH grp AS (
	INSERT INTO groups(name)
	VALUES($1)
	RETURNING uuid, name
), usr AS (
	INSERT INTO users(name)
	VALUES($1)
	RETURNING uuid, name, state
), grp_policies AS (
	INSERT INTO group_policies(group_uuid, priority, effect, action, resource)
	VALUES (
		(SELECT uuid FROM grp), 0, 'allow', 'read','users/me'
	), (

		(SELECT uuid FROM grp), 0, 'allow', 'create','users/'||(SELECT uuid FROM usr)
	), (
		(SELECT uuid FROM grp), 0, 'allow', 'read','users/'||(SELECT uuid FROM usr)
	), (
		(SELECT uuid FROM grp), 0, 'allow', 'update','users/'||(SELECT uuid FROM usr)
	), (
		(SELECT uuid FROM grp), 0, 'allow', 'delete','users/'||(SELECT uuid FROM usr)
	), (

		(SELECT uuid FROM grp), 0, 'allow', 'create','users/'||(SELECT uuid FROM usr)||'/%'
	), (
		(SELECT uuid FROM grp), 0, 'allow', 'read','users/'||(SELECT uuid FROM usr)||'/%'
	), (
		(SELECT uuid FROM grp), 0, 'allow', 'update','users/'||(SELECT uuid FROM usr)||'/%'
	), (
		(SELECT uuid FROM grp), 0, 'allow', 'delete','users/'||(SELECT uuid FROM usr)||'/%'
	), (
		(SELECT uuid FROM grp), 0, 'deny', 'update','users/'||(SELECT uuid FROM usr)||'/rate'
	)
), usrgrp AS (
	INSERT INTO user_groups(user_uuid, group_uuid)
	SELECT usr.uuid, grp.uuid
	FROM usr, grp
)
SELECT uuid, name, state FROM usr
`

type CreateUserRow struct {
	Uuid  uuid.UUID
	Name  string
	State AccountState
}

func (q *Queries) CreateUser(ctx context.Context, name string) (CreateUserRow, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, name)
	var i CreateUserRow
	err := row.Scan(&i.Uuid, &i.Name, &i.State)
	return i, err
}

const deleteTokenFromUser = `-- name: DeleteTokenFromUser :execrows
DELETE FROM user_tokens
WHERE user_tokens.uuid = $1
AND user_tokens.user_uuid = $2
`

type DeleteTokenFromUserParams struct {
	TokenUuid uuid.UUID
	UserUuid  uuid.UUID
}

func (q *Queries) DeleteTokenFromUser(ctx context.Context, arg DeleteTokenFromUserParams) (int64, error) {
	result, err := q.exec(ctx, q.deleteTokenFromUserStmt, deleteTokenFromUser, arg.TokenUuid, arg.UserUuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteUser = `-- name: DeleteUser :execrows
WITH grp AS (
	DELETE FROM groups
	WHERE name = (
		SELECT name
		FROM users
		WHERE users.uuid = $1
	)
)
DELETE FROM users
WHERE users.uuid = $1
`

func (q *Queries) DeleteUser(ctx context.Context, uuid uuid.UUID) (int64, error) {
	result, err := q.exec(ctx, q.deleteUserStmt, deleteUser, uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const existsUser = `-- name: ExistsUser :one
SELECT COUNT(*) AS count
FROM users
WHERE users.uuid = $1
`

func (q *Queries) ExistsUser(ctx context.Context, uuid uuid.UUID) (int64, error) {
	row := q.queryRow(ctx, q.existsUserStmt, existsUser, uuid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const findTokensByUser = `-- name: FindTokensByUser :many
SELECT uuid, name, created
FROM user_tokens
WHERE user_tokens.user_uuid = $1
`

type FindTokensByUserRow struct {
	Uuid    uuid.UUID
	Name    string
	Created time.Time
}

func (q *Queries) FindTokensByUser(ctx context.Context, uuid uuid.UUID) ([]FindTokensByUserRow, error) {
	rows, err := q.query(ctx, q.findTokensByUserStmt, findTokensByUser, uuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindTokensByUserRow{}
	for rows.Next() {
		var i FindTokensByUserRow
		if err := rows.Scan(&i.Uuid, &i.Name, &i.Created); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserByUUID = `-- name: FindUserByUUID :one
SELECT uuid, name, state
FROM users
WHERE users.uuid = $1
LIMIT 1
`

func (q *Queries) FindUserByUUID(ctx context.Context, uuid uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.findUserByUUIDStmt, findUserByUUID, uuid)
	var i User
	err := row.Scan(&i.Uuid, &i.Name, &i.State)
	return i, err
}

const findUsers = `-- name: FindUsers :many
WITH usr AS (
	SELECT users.uuid
	FROM users, user_tokens
	WHERE user_tokens.user_uuid = users.uuid
	AND user_tokens.token_hash = sha256($1)
	LIMIT 1
), policies AS (
	SELECT group_policies.effect, group_policies.priority, group_policies.resource
	FROM group_policies, user_groups
	WHERE user_groups.group_uuid = group_policies.group_uuid
	AND user_groups.user_uuid = (SELECT uuid FROM usr)
	AND action = 'read'
), partial_users AS (
	SELECT uuid, name, state
	FROM users
	WHERE 'users/'||users.uuid LIKE ANY(
		(SELECT resource FROM policies WHERE effect = 'allow')
	)
	EXCEPT
	SELECT uuid, name, state
	FROM users
	WHERE 'users/'||users.uuid LIKE ANY(
		(SELECT resource FROM policies WHERE effect = 'deny')
	)
	ORDER BY name
	LIMIT $3::BIGINT
	OFFSET $2::BIGINT
)
SELECT partial_users.uuid, partial_users.name, partial_users.state, (COALESCE((
	SELECT json_agg(json_build_object('uuid', groups.uuid, 'name', groups.name))
	FROM user_groups, groups
	WHERE groups.uuid = user_groups.group_uuid
	AND partial_users.uuid = user_groups.user_uuid
), '[]')::text) AS groups
FROM partial_users
`

type FindUsersParams struct {
	Token     []byte
	ArgOffset int64
	ArgLimit  int64
}

type FindUsersRow struct {
	Uuid   uuid.UUID
	Name   string
	State  AccountState
	Groups string
}

func (q *Queries) FindUsers(ctx context.Context, arg FindUsersParams) ([]FindUsersRow, error) {
	rows, err := q.query(ctx, q.findUsersStmt, findUsers, arg.Token, arg.ArgOffset, arg.ArgLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindUsersRow{}
	for rows.Next() {
		var i FindUsersRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.State,
			&i.Groups,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserUuidFromToken = `-- name: GetUserUuidFromToken :one
SELECT user_tokens.user_uuid AS uuid
FROM user_tokens
WHERE user_tokens.token_hash = sha256($1)
LIMIT 1
`

func (q *Queries) GetUserUuidFromToken(ctx context.Context, token []byte) (uuid.UUID, error) {
	row := q.queryRow(ctx, q.getUserUuidFromTokenStmt, getUserUuidFromToken, token)
	var uuid uuid.UUID
	err := row.Scan(&uuid)
	return uuid, err
}

const removeUserFromAllGroups = `-- name: RemoveUserFromAllGroups :execrows
DELETE FROM user_groups
WHERE user_uuid = $1
`

func (q *Queries) RemoveUserFromAllGroups(ctx context.Context, userUuid uuid.UUID) (int64, error) {
	result, err := q.exec(ctx, q.removeUserFromAllGroupsStmt, removeUserFromAllGroups, userUuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const removeUserFromGroups = `-- name: RemoveUserFromGroups :execrows
DELETE FROM user_groups
WHERE user_uuid = $1
AND group_uuid = ANY($2::uuid[])
`

type RemoveUserFromGroupsParams struct {
	UserUuid   uuid.UUID
	GroupUuids []uuid.UUID
}

func (q *Queries) RemoveUserFromGroups(ctx context.Context, arg RemoveUserFromGroupsParams) (int64, error) {
	result, err := q.exec(ctx, q.removeUserFromGroupsStmt, removeUserFromGroups, arg.UserUuid, pq.Array(arg.GroupUuids))
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
