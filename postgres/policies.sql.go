// Code generated by sqlc. DO NOT EDIT.
// source: policies.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createPolicy = `-- name: CreatePolicy :one
INSERT INTO group_policies(group_uuid, priority, effect, action, resource)
VALUES (
	$1,
	$2,
	$3,
	$4,
	$5
)
RETURNING uuid, group_uuid, priority, effect, action, resource
`

type CreatePolicyParams struct {
	GroupUuid uuid.UUID
	Priority  int32
	Effect    PolicyEffect
	Action    PolicyAction
	Resource  string
}

func (q *Queries) CreatePolicy(ctx context.Context, arg CreatePolicyParams) (GroupPolicy, error) {
	row := q.queryRow(ctx, q.createPolicyStmt, createPolicy,
		arg.GroupUuid,
		arg.Priority,
		arg.Effect,
		arg.Action,
		arg.Resource,
	)
	var i GroupPolicy
	err := row.Scan(
		&i.Uuid,
		&i.GroupUuid,
		&i.Priority,
		&i.Effect,
		&i.Action,
		&i.Resource,
	)
	return i, err
}

const deletePolicyByUUID = `-- name: DeletePolicyByUUID :execrows
DELETE
FROM group_policies
WHERE group_policies.uuid = $1
`

func (q *Queries) DeletePolicyByUUID(ctx context.Context, uuid uuid.UUID) (int64, error) {
	result, err := q.exec(ctx, q.deletePolicyByUUIDStmt, deletePolicyByUUID, uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const existsPolicy = `-- name: ExistsPolicy :one
SELECT COUNT(*) AS count
FROM group_policies
WHERE group_policies.uuid = $1
`

func (q *Queries) ExistsPolicy(ctx context.Context, uuid uuid.UUID) (int64, error) {
	row := q.queryRow(ctx, q.existsPolicyStmt, existsPolicy, uuid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const findPolicies = `-- name: FindPolicies :many
WITH usr AS (
	SELECT users.uuid
	FROM users, user_tokens
	WHERE user_tokens.user_uuid = users.uuid
	AND user_tokens.token_hash = sha256($3)
	LIMIT 1
), policies AS (
	SELECT group_policies.effect, group_policies.priority, group_policies.resource
	FROM group_policies, user_groups
	WHERE user_groups.group_uuid = group_policies.group_uuid
	AND user_groups.user_uuid = (SELECT uuid FROM usr)
	AND action = 'read'
), f_group_policies AS (
	SELECT uuid, group_uuid, priority, effect, action, resource FROM group_policies
	WHERE
		$4::uuid[] IS NULL
	OR
		group_policies.group_uuid = ANY($4::uuid[])
)
SELECT uuid, group_uuid, priority, effect, action, resource
FROM f_group_policies
WHERE 'policies/'||f_group_policies.uuid LIKE ANY(
	(SELECT resource FROM policies WHERE effect = 'allow')
)
EXCEPT
SELECT uuid, group_uuid, priority, effect, action, resource
FROM f_group_policies
WHERE 'policies/'||f_group_policies.uuid LIKE ANY(
	(SELECT resource FROM policies WHERE effect = 'deny')
)
ORDER BY resource DESC, effect ASC, action DESC, priority ASC
LIMIT $2::BIGINT
OFFSET $1::BIGINT
`

type FindPoliciesParams struct {
	ArgOffset  int64
	ArgLimit   int64
	Token      []byte
	GroupUuids []uuid.UUID
}

type FindPoliciesRow struct {
	Uuid      uuid.UUID
	GroupUuid uuid.UUID
	Priority  int32
	Effect    PolicyEffect
	Action    PolicyAction
	Resource  string
}

func (q *Queries) FindPolicies(ctx context.Context, arg FindPoliciesParams) ([]FindPoliciesRow, error) {
	rows, err := q.query(ctx, q.findPoliciesStmt, findPolicies,
		arg.ArgOffset,
		arg.ArgLimit,
		arg.Token,
		pq.Array(arg.GroupUuids),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindPoliciesRow{}
	for rows.Next() {
		var i FindPoliciesRow
		if err := rows.Scan(
			&i.Uuid,
			&i.GroupUuid,
			&i.Priority,
			&i.Effect,
			&i.Action,
			&i.Resource,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPolicyByUUID = `-- name: FindPolicyByUUID :one
SELECT uuid, group_uuid, priority, effect, action, resource
FROM group_policies
WHERE group_policies.uuid = $1
`

func (q *Queries) FindPolicyByUUID(ctx context.Context, uuid uuid.UUID) (GroupPolicy, error) {
	row := q.queryRow(ctx, q.findPolicyByUUIDStmt, findPolicyByUUID, uuid)
	var i GroupPolicy
	err := row.Scan(
		&i.Uuid,
		&i.GroupUuid,
		&i.Priority,
		&i.Effect,
		&i.Action,
		&i.Resource,
	)
	return i, err
}

const setPolicyAction = `-- name: SetPolicyAction :execrows
UPDATE group_policies
SET action = $1
WHERE group_policies.uuid = $2
`

type SetPolicyActionParams struct {
	Action PolicyAction
	Uuid   uuid.UUID
}

func (q *Queries) SetPolicyAction(ctx context.Context, arg SetPolicyActionParams) (int64, error) {
	result, err := q.exec(ctx, q.setPolicyActionStmt, setPolicyAction, arg.Action, arg.Uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const setPolicyEffect = `-- name: SetPolicyEffect :execrows
UPDATE group_policies
SET effect = $1
WHERE group_policies.uuid = $2
`

type SetPolicyEffectParams struct {
	Effect PolicyEffect
	Uuid   uuid.UUID
}

func (q *Queries) SetPolicyEffect(ctx context.Context, arg SetPolicyEffectParams) (int64, error) {
	result, err := q.exec(ctx, q.setPolicyEffectStmt, setPolicyEffect, arg.Effect, arg.Uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const setPolicyGroup = `-- name: SetPolicyGroup :execrows
UPDATE group_policies
SET group_uuid = $1
WHERE group_policies.uuid = $2
`

type SetPolicyGroupParams struct {
	GroupUuid uuid.UUID
	Uuid      uuid.UUID
}

func (q *Queries) SetPolicyGroup(ctx context.Context, arg SetPolicyGroupParams) (int64, error) {
	result, err := q.exec(ctx, q.setPolicyGroupStmt, setPolicyGroup, arg.GroupUuid, arg.Uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const setPolicyPriority = `-- name: SetPolicyPriority :execrows
UPDATE group_policies
SET priority = $1
WHERE group_policies.uuid = $2
`

type SetPolicyPriorityParams struct {
	Priority int32
	Uuid     uuid.UUID
}

func (q *Queries) SetPolicyPriority(ctx context.Context, arg SetPolicyPriorityParams) (int64, error) {
	result, err := q.exec(ctx, q.setPolicyPriorityStmt, setPolicyPriority, arg.Priority, arg.Uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const setPolicyResource = `-- name: SetPolicyResource :execrows
UPDATE group_policies
SET resource = $1
WHERE group_policies.uuid = $2
`

type SetPolicyResourceParams struct {
	Resource string
	Uuid     uuid.UUID
}

func (q *Queries) SetPolicyResource(ctx context.Context, arg SetPolicyResourceParams) (int64, error) {
	result, err := q.exec(ctx, q.setPolicyResourceStmt, setPolicyResource, arg.Resource, arg.Uuid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
