// Code generated by sqlc. DO NOT EDIT.

package postgresql

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addTokenToUserStmt, err = db.PrepareContext(ctx, addTokenToUser); err != nil {
		return nil, fmt.Errorf("error preparing query AddTokenToUser: %w", err)
	}
	if q.addUserToGroupStmt, err = db.PrepareContext(ctx, addUserToGroup); err != nil {
		return nil, fmt.Errorf("error preparing query AddUserToGroup: %w", err)
	}
	if q.checkUserTokenHasAccessStmt, err = db.PrepareContext(ctx, checkUserTokenHasAccess); err != nil {
		return nil, fmt.Errorf("error preparing query CheckUserTokenHasAccess: %w", err)
	}
	if q.createCodeRevisionStmt, err = db.PrepareContext(ctx, createCodeRevision); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCodeRevision: %w", err)
	}
	if q.createDatasetStmt, err = db.PrepareContext(ctx, createDataset); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDataset: %w", err)
	}
	if q.createGroupStmt, err = db.PrepareContext(ctx, createGroup); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGroup: %w", err)
	}
	if q.createPolicyStmt, err = db.PrepareContext(ctx, createPolicy); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePolicy: %w", err)
	}
	if q.createProgramStmt, err = db.PrepareContext(ctx, createProgram); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProgram: %w", err)
	}
	if q.createThingStmt, err = db.PrepareContext(ctx, createThing); err != nil {
		return nil, fmt.Errorf("error preparing query CreateThing: %w", err)
	}
	if q.createTimeseriesStmt, err = db.PrepareContext(ctx, createTimeseries); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTimeseries: %w", err)
	}
	if q.createTsDataStmt, err = db.PrepareContext(ctx, createTsData); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTsData: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createUserTokenStmt, err = db.PrepareContext(ctx, createUserToken); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserToken: %w", err)
	}
	if q.deleteAllTsDataStmt, err = db.PrepareContext(ctx, deleteAllTsData); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAllTsData: %w", err)
	}
	if q.deleteDatasetStmt, err = db.PrepareContext(ctx, deleteDataset); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteDataset: %w", err)
	}
	if q.deleteGroupStmt, err = db.PrepareContext(ctx, deleteGroup); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGroup: %w", err)
	}
	if q.deletePolicyByUUIDStmt, err = db.PrepareContext(ctx, deletePolicyByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePolicyByUUID: %w", err)
	}
	if q.deleteProgramStmt, err = db.PrepareContext(ctx, deleteProgram); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProgram: %w", err)
	}
	if q.deleteProgramCodeRevisionStmt, err = db.PrepareContext(ctx, deleteProgramCodeRevision); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProgramCodeRevision: %w", err)
	}
	if q.deleteThingStmt, err = db.PrepareContext(ctx, deleteThing); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteThing: %w", err)
	}
	if q.deleteTimeseriesStmt, err = db.PrepareContext(ctx, deleteTimeseries); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTimeseries: %w", err)
	}
	if q.deleteTokenFromUserStmt, err = db.PrepareContext(ctx, deleteTokenFromUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTokenFromUser: %w", err)
	}
	if q.deleteTsDataRangeStmt, err = db.PrepareContext(ctx, deleteTsDataRange); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTsDataRange: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.existsDatasetStmt, err = db.PrepareContext(ctx, existsDataset); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsDataset: %w", err)
	}
	if q.existsGroupStmt, err = db.PrepareContext(ctx, existsGroup); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsGroup: %w", err)
	}
	if q.existsPolicyStmt, err = db.PrepareContext(ctx, existsPolicy); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsPolicy: %w", err)
	}
	if q.existsProgramStmt, err = db.PrepareContext(ctx, existsProgram); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsProgram: %w", err)
	}
	if q.existsThingStmt, err = db.PrepareContext(ctx, existsThing); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsThing: %w", err)
	}
	if q.existsTimeseriesStmt, err = db.PrepareContext(ctx, existsTimeseries); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsTimeseries: %w", err)
	}
	if q.existsUserStmt, err = db.PrepareContext(ctx, existsUser); err != nil {
		return nil, fmt.Errorf("error preparing query ExistsUser: %w", err)
	}
	if q.findAllModulesStmt, err = db.PrepareContext(ctx, findAllModules); err != nil {
		return nil, fmt.Errorf("error preparing query FindAllModules: %w", err)
	}
	if q.findAllRoutineRevisionsStmt, err = db.PrepareContext(ctx, findAllRoutineRevisions); err != nil {
		return nil, fmt.Errorf("error preparing query FindAllRoutineRevisions: %w", err)
	}
	if q.findDatasetByThingStmt, err = db.PrepareContext(ctx, findDatasetByThing); err != nil {
		return nil, fmt.Errorf("error preparing query FindDatasetByThing: %w", err)
	}
	if q.findDatasetByUUIDStmt, err = db.PrepareContext(ctx, findDatasetByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query FindDatasetByUUID: %w", err)
	}
	if q.findDatasetsStmt, err = db.PrepareContext(ctx, findDatasets); err != nil {
		return nil, fmt.Errorf("error preparing query FindDatasets: %w", err)
	}
	if q.findDatasetsByTagsStmt, err = db.PrepareContext(ctx, findDatasetsByTags); err != nil {
		return nil, fmt.Errorf("error preparing query FindDatasetsByTags: %w", err)
	}
	if q.findGroupByUuidStmt, err = db.PrepareContext(ctx, findGroupByUuid); err != nil {
		return nil, fmt.Errorf("error preparing query FindGroupByUuid: %w", err)
	}
	if q.findGroupsStmt, err = db.PrepareContext(ctx, findGroups); err != nil {
		return nil, fmt.Errorf("error preparing query FindGroups: %w", err)
	}
	if q.findGroupsByUserStmt, err = db.PrepareContext(ctx, findGroupsByUser); err != nil {
		return nil, fmt.Errorf("error preparing query FindGroupsByUser: %w", err)
	}
	if q.findPoliciesStmt, err = db.PrepareContext(ctx, findPolicies); err != nil {
		return nil, fmt.Errorf("error preparing query FindPolicies: %w", err)
	}
	if q.findPoliciesByGroupStmt, err = db.PrepareContext(ctx, findPoliciesByGroup); err != nil {
		return nil, fmt.Errorf("error preparing query FindPoliciesByGroup: %w", err)
	}
	if q.findPoliciesByUserStmt, err = db.PrepareContext(ctx, findPoliciesByUser); err != nil {
		return nil, fmt.Errorf("error preparing query FindPoliciesByUser: %w", err)
	}
	if q.findPolicyByUUIDStmt, err = db.PrepareContext(ctx, findPolicyByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query FindPolicyByUUID: %w", err)
	}
	if q.findProgramByUUIDStmt, err = db.PrepareContext(ctx, findProgramByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query FindProgramByUUID: %w", err)
	}
	if q.findProgramCodeRevisionsStmt, err = db.PrepareContext(ctx, findProgramCodeRevisions); err != nil {
		return nil, fmt.Errorf("error preparing query FindProgramCodeRevisions: %w", err)
	}
	if q.findProgramsStmt, err = db.PrepareContext(ctx, findPrograms); err != nil {
		return nil, fmt.Errorf("error preparing query FindPrograms: %w", err)
	}
	if q.findProgramsByTagsStmt, err = db.PrepareContext(ctx, findProgramsByTags); err != nil {
		return nil, fmt.Errorf("error preparing query FindProgramsByTags: %w", err)
	}
	if q.findThingByUUIDStmt, err = db.PrepareContext(ctx, findThingByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query FindThingByUUID: %w", err)
	}
	if q.findThingsStmt, err = db.PrepareContext(ctx, findThings); err != nil {
		return nil, fmt.Errorf("error preparing query FindThings: %w", err)
	}
	if q.findThingsByTagsStmt, err = db.PrepareContext(ctx, findThingsByTags); err != nil {
		return nil, fmt.Errorf("error preparing query FindThingsByTags: %w", err)
	}
	if q.findTimeseriesStmt, err = db.PrepareContext(ctx, findTimeseries); err != nil {
		return nil, fmt.Errorf("error preparing query FindTimeseries: %w", err)
	}
	if q.findTimeseriesByTagsStmt, err = db.PrepareContext(ctx, findTimeseriesByTags); err != nil {
		return nil, fmt.Errorf("error preparing query FindTimeseriesByTags: %w", err)
	}
	if q.findTimeseriesByThingStmt, err = db.PrepareContext(ctx, findTimeseriesByThing); err != nil {
		return nil, fmt.Errorf("error preparing query FindTimeseriesByThing: %w", err)
	}
	if q.findTimeseriesByUUIDStmt, err = db.PrepareContext(ctx, findTimeseriesByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query FindTimeseriesByUUID: %w", err)
	}
	if q.findTokensByUserStmt, err = db.PrepareContext(ctx, findTokensByUser); err != nil {
		return nil, fmt.Errorf("error preparing query FindTokensByUser: %w", err)
	}
	if q.findUserByUUIDStmt, err = db.PrepareContext(ctx, findUserByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query FindUserByUUID: %w", err)
	}
	if q.findUsersStmt, err = db.PrepareContext(ctx, findUsers); err != nil {
		return nil, fmt.Errorf("error preparing query FindUsers: %w", err)
	}
	if q.getDatasetContentByUUIDStmt, err = db.PrepareContext(ctx, getDatasetContentByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query GetDatasetContentByUUID: %w", err)
	}
	if q.getNamedModuleCodeAtHeadStmt, err = db.PrepareContext(ctx, getNamedModuleCodeAtHead); err != nil {
		return nil, fmt.Errorf("error preparing query GetNamedModuleCodeAtHead: %w", err)
	}
	if q.getNamedModuleCodeAtRevisionStmt, err = db.PrepareContext(ctx, getNamedModuleCodeAtRevision); err != nil {
		return nil, fmt.Errorf("error preparing query GetNamedModuleCodeAtRevision: %w", err)
	}
	if q.getProgramCodeAtHeadStmt, err = db.PrepareContext(ctx, getProgramCodeAtHead); err != nil {
		return nil, fmt.Errorf("error preparing query GetProgramCodeAtHead: %w", err)
	}
	if q.getProgramCodeAtRevisionStmt, err = db.PrepareContext(ctx, getProgramCodeAtRevision); err != nil {
		return nil, fmt.Errorf("error preparing query GetProgramCodeAtRevision: %w", err)
	}
	if q.getSignedProgramCodeAtHeadStmt, err = db.PrepareContext(ctx, getSignedProgramCodeAtHead); err != nil {
		return nil, fmt.Errorf("error preparing query GetSignedProgramCodeAtHead: %w", err)
	}
	if q.getTimeseriesByUUIDStmt, err = db.PrepareContext(ctx, getTimeseriesByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTimeseriesByUUID: %w", err)
	}
	if q.getTsDataRangeStmt, err = db.PrepareContext(ctx, getTsDataRange); err != nil {
		return nil, fmt.Errorf("error preparing query GetTsDataRange: %w", err)
	}
	if q.getUnitFromTimeseriesStmt, err = db.PrepareContext(ctx, getUnitFromTimeseries); err != nil {
		return nil, fmt.Errorf("error preparing query GetUnitFromTimeseries: %w", err)
	}
	if q.getUserUuidFromTokenStmt, err = db.PrepareContext(ctx, getUserUuidFromToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserUuidFromToken: %w", err)
	}
	if q.removeUserFromAllGroupsStmt, err = db.PrepareContext(ctx, removeUserFromAllGroups); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveUserFromAllGroups: %w", err)
	}
	if q.removeUserFromGroupsStmt, err = db.PrepareContext(ctx, removeUserFromGroups); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveUserFromGroups: %w", err)
	}
	if q.setDatasetContentByUUIDStmt, err = db.PrepareContext(ctx, setDatasetContentByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query SetDatasetContentByUUID: %w", err)
	}
	if q.setDatasetFormatByUUIDStmt, err = db.PrepareContext(ctx, setDatasetFormatByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query SetDatasetFormatByUUID: %w", err)
	}
	if q.setDatasetNameByUUIDStmt, err = db.PrepareContext(ctx, setDatasetNameByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query SetDatasetNameByUUID: %w", err)
	}
	if q.setDatasetTagsStmt, err = db.PrepareContext(ctx, setDatasetTags); err != nil {
		return nil, fmt.Errorf("error preparing query SetDatasetTags: %w", err)
	}
	if q.setGroupNameByUUIDStmt, err = db.PrepareContext(ctx, setGroupNameByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query SetGroupNameByUUID: %w", err)
	}
	if q.setPolicyActionStmt, err = db.PrepareContext(ctx, setPolicyAction); err != nil {
		return nil, fmt.Errorf("error preparing query SetPolicyAction: %w", err)
	}
	if q.setPolicyEffectStmt, err = db.PrepareContext(ctx, setPolicyEffect); err != nil {
		return nil, fmt.Errorf("error preparing query SetPolicyEffect: %w", err)
	}
	if q.setPolicyGroupStmt, err = db.PrepareContext(ctx, setPolicyGroup); err != nil {
		return nil, fmt.Errorf("error preparing query SetPolicyGroup: %w", err)
	}
	if q.setPolicyPriorityStmt, err = db.PrepareContext(ctx, setPolicyPriority); err != nil {
		return nil, fmt.Errorf("error preparing query SetPolicyPriority: %w", err)
	}
	if q.setPolicyResourceStmt, err = db.PrepareContext(ctx, setPolicyResource); err != nil {
		return nil, fmt.Errorf("error preparing query SetPolicyResource: %w", err)
	}
	if q.setProgramDeadlineByUUIDStmt, err = db.PrepareContext(ctx, setProgramDeadlineByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query SetProgramDeadlineByUUID: %w", err)
	}
	if q.setProgramLanguageByUUIDStmt, err = db.PrepareContext(ctx, setProgramLanguageByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query SetProgramLanguageByUUID: %w", err)
	}
	if q.setProgramNameByUUIDStmt, err = db.PrepareContext(ctx, setProgramNameByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query SetProgramNameByUUID: %w", err)
	}
	if q.setProgramScheduleByUUIDStmt, err = db.PrepareContext(ctx, setProgramScheduleByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query SetProgramScheduleByUUID: %w", err)
	}
	if q.setProgramStateByUUIDStmt, err = db.PrepareContext(ctx, setProgramStateByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query SetProgramStateByUUID: %w", err)
	}
	if q.setProgramTagsStmt, err = db.PrepareContext(ctx, setProgramTags); err != nil {
		return nil, fmt.Errorf("error preparing query SetProgramTags: %w", err)
	}
	if q.setProgramTypeByUUIDStmt, err = db.PrepareContext(ctx, setProgramTypeByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query SetProgramTypeByUUID: %w", err)
	}
	if q.setThingNameByUUIDStmt, err = db.PrepareContext(ctx, setThingNameByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query SetThingNameByUUID: %w", err)
	}
	if q.setThingStateByUUIDStmt, err = db.PrepareContext(ctx, setThingStateByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query SetThingStateByUUID: %w", err)
	}
	if q.setThingTagsStmt, err = db.PrepareContext(ctx, setThingTags); err != nil {
		return nil, fmt.Errorf("error preparing query SetThingTags: %w", err)
	}
	if q.setThingTypeByUUIDStmt, err = db.PrepareContext(ctx, setThingTypeByUUID); err != nil {
		return nil, fmt.Errorf("error preparing query SetThingTypeByUUID: %w", err)
	}
	if q.setTimeseriesLowerBoundStmt, err = db.PrepareContext(ctx, setTimeseriesLowerBound); err != nil {
		return nil, fmt.Errorf("error preparing query SetTimeseriesLowerBound: %w", err)
	}
	if q.setTimeseriesNameStmt, err = db.PrepareContext(ctx, setTimeseriesName); err != nil {
		return nil, fmt.Errorf("error preparing query SetTimeseriesName: %w", err)
	}
	if q.setTimeseriesSiUnitStmt, err = db.PrepareContext(ctx, setTimeseriesSiUnit); err != nil {
		return nil, fmt.Errorf("error preparing query SetTimeseriesSiUnit: %w", err)
	}
	if q.setTimeseriesTagsStmt, err = db.PrepareContext(ctx, setTimeseriesTags); err != nil {
		return nil, fmt.Errorf("error preparing query SetTimeseriesTags: %w", err)
	}
	if q.setTimeseriesThingStmt, err = db.PrepareContext(ctx, setTimeseriesThing); err != nil {
		return nil, fmt.Errorf("error preparing query SetTimeseriesThing: %w", err)
	}
	if q.setTimeseriesUpperBoundStmt, err = db.PrepareContext(ctx, setTimeseriesUpperBound); err != nil {
		return nil, fmt.Errorf("error preparing query SetTimeseriesUpperBound: %w", err)
	}
	if q.setUserNameStmt, err = db.PrepareContext(ctx, setUserName); err != nil {
		return nil, fmt.Errorf("error preparing query SetUserName: %w", err)
	}
	if q.signProgramCodeRevisionStmt, err = db.PrepareContext(ctx, signProgramCodeRevision); err != nil {
		return nil, fmt.Errorf("error preparing query SignProgramCodeRevision: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addTokenToUserStmt != nil {
		if cerr := q.addTokenToUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addTokenToUserStmt: %w", cerr)
		}
	}
	if q.addUserToGroupStmt != nil {
		if cerr := q.addUserToGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addUserToGroupStmt: %w", cerr)
		}
	}
	if q.checkUserTokenHasAccessStmt != nil {
		if cerr := q.checkUserTokenHasAccessStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkUserTokenHasAccessStmt: %w", cerr)
		}
	}
	if q.createCodeRevisionStmt != nil {
		if cerr := q.createCodeRevisionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCodeRevisionStmt: %w", cerr)
		}
	}
	if q.createDatasetStmt != nil {
		if cerr := q.createDatasetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDatasetStmt: %w", cerr)
		}
	}
	if q.createGroupStmt != nil {
		if cerr := q.createGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGroupStmt: %w", cerr)
		}
	}
	if q.createPolicyStmt != nil {
		if cerr := q.createPolicyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPolicyStmt: %w", cerr)
		}
	}
	if q.createProgramStmt != nil {
		if cerr := q.createProgramStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProgramStmt: %w", cerr)
		}
	}
	if q.createThingStmt != nil {
		if cerr := q.createThingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createThingStmt: %w", cerr)
		}
	}
	if q.createTimeseriesStmt != nil {
		if cerr := q.createTimeseriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTimeseriesStmt: %w", cerr)
		}
	}
	if q.createTsDataStmt != nil {
		if cerr := q.createTsDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTsDataStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createUserTokenStmt != nil {
		if cerr := q.createUserTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserTokenStmt: %w", cerr)
		}
	}
	if q.deleteAllTsDataStmt != nil {
		if cerr := q.deleteAllTsDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAllTsDataStmt: %w", cerr)
		}
	}
	if q.deleteDatasetStmt != nil {
		if cerr := q.deleteDatasetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteDatasetStmt: %w", cerr)
		}
	}
	if q.deleteGroupStmt != nil {
		if cerr := q.deleteGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGroupStmt: %w", cerr)
		}
	}
	if q.deletePolicyByUUIDStmt != nil {
		if cerr := q.deletePolicyByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePolicyByUUIDStmt: %w", cerr)
		}
	}
	if q.deleteProgramStmt != nil {
		if cerr := q.deleteProgramStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProgramStmt: %w", cerr)
		}
	}
	if q.deleteProgramCodeRevisionStmt != nil {
		if cerr := q.deleteProgramCodeRevisionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteProgramCodeRevisionStmt: %w", cerr)
		}
	}
	if q.deleteThingStmt != nil {
		if cerr := q.deleteThingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteThingStmt: %w", cerr)
		}
	}
	if q.deleteTimeseriesStmt != nil {
		if cerr := q.deleteTimeseriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTimeseriesStmt: %w", cerr)
		}
	}
	if q.deleteTokenFromUserStmt != nil {
		if cerr := q.deleteTokenFromUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTokenFromUserStmt: %w", cerr)
		}
	}
	if q.deleteTsDataRangeStmt != nil {
		if cerr := q.deleteTsDataRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTsDataRangeStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.existsDatasetStmt != nil {
		if cerr := q.existsDatasetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsDatasetStmt: %w", cerr)
		}
	}
	if q.existsGroupStmt != nil {
		if cerr := q.existsGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsGroupStmt: %w", cerr)
		}
	}
	if q.existsPolicyStmt != nil {
		if cerr := q.existsPolicyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsPolicyStmt: %w", cerr)
		}
	}
	if q.existsProgramStmt != nil {
		if cerr := q.existsProgramStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsProgramStmt: %w", cerr)
		}
	}
	if q.existsThingStmt != nil {
		if cerr := q.existsThingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsThingStmt: %w", cerr)
		}
	}
	if q.existsTimeseriesStmt != nil {
		if cerr := q.existsTimeseriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsTimeseriesStmt: %w", cerr)
		}
	}
	if q.existsUserStmt != nil {
		if cerr := q.existsUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing existsUserStmt: %w", cerr)
		}
	}
	if q.findAllModulesStmt != nil {
		if cerr := q.findAllModulesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findAllModulesStmt: %w", cerr)
		}
	}
	if q.findAllRoutineRevisionsStmt != nil {
		if cerr := q.findAllRoutineRevisionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findAllRoutineRevisionsStmt: %w", cerr)
		}
	}
	if q.findDatasetByThingStmt != nil {
		if cerr := q.findDatasetByThingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findDatasetByThingStmt: %w", cerr)
		}
	}
	if q.findDatasetByUUIDStmt != nil {
		if cerr := q.findDatasetByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findDatasetByUUIDStmt: %w", cerr)
		}
	}
	if q.findDatasetsStmt != nil {
		if cerr := q.findDatasetsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findDatasetsStmt: %w", cerr)
		}
	}
	if q.findDatasetsByTagsStmt != nil {
		if cerr := q.findDatasetsByTagsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findDatasetsByTagsStmt: %w", cerr)
		}
	}
	if q.findGroupByUuidStmt != nil {
		if cerr := q.findGroupByUuidStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findGroupByUuidStmt: %w", cerr)
		}
	}
	if q.findGroupsStmt != nil {
		if cerr := q.findGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findGroupsStmt: %w", cerr)
		}
	}
	if q.findGroupsByUserStmt != nil {
		if cerr := q.findGroupsByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findGroupsByUserStmt: %w", cerr)
		}
	}
	if q.findPoliciesStmt != nil {
		if cerr := q.findPoliciesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findPoliciesStmt: %w", cerr)
		}
	}
	if q.findPoliciesByGroupStmt != nil {
		if cerr := q.findPoliciesByGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findPoliciesByGroupStmt: %w", cerr)
		}
	}
	if q.findPoliciesByUserStmt != nil {
		if cerr := q.findPoliciesByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findPoliciesByUserStmt: %w", cerr)
		}
	}
	if q.findPolicyByUUIDStmt != nil {
		if cerr := q.findPolicyByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findPolicyByUUIDStmt: %w", cerr)
		}
	}
	if q.findProgramByUUIDStmt != nil {
		if cerr := q.findProgramByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findProgramByUUIDStmt: %w", cerr)
		}
	}
	if q.findProgramCodeRevisionsStmt != nil {
		if cerr := q.findProgramCodeRevisionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findProgramCodeRevisionsStmt: %w", cerr)
		}
	}
	if q.findProgramsStmt != nil {
		if cerr := q.findProgramsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findProgramsStmt: %w", cerr)
		}
	}
	if q.findProgramsByTagsStmt != nil {
		if cerr := q.findProgramsByTagsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findProgramsByTagsStmt: %w", cerr)
		}
	}
	if q.findThingByUUIDStmt != nil {
		if cerr := q.findThingByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findThingByUUIDStmt: %w", cerr)
		}
	}
	if q.findThingsStmt != nil {
		if cerr := q.findThingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findThingsStmt: %w", cerr)
		}
	}
	if q.findThingsByTagsStmt != nil {
		if cerr := q.findThingsByTagsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findThingsByTagsStmt: %w", cerr)
		}
	}
	if q.findTimeseriesStmt != nil {
		if cerr := q.findTimeseriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findTimeseriesStmt: %w", cerr)
		}
	}
	if q.findTimeseriesByTagsStmt != nil {
		if cerr := q.findTimeseriesByTagsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findTimeseriesByTagsStmt: %w", cerr)
		}
	}
	if q.findTimeseriesByThingStmt != nil {
		if cerr := q.findTimeseriesByThingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findTimeseriesByThingStmt: %w", cerr)
		}
	}
	if q.findTimeseriesByUUIDStmt != nil {
		if cerr := q.findTimeseriesByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findTimeseriesByUUIDStmt: %w", cerr)
		}
	}
	if q.findTokensByUserStmt != nil {
		if cerr := q.findTokensByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findTokensByUserStmt: %w", cerr)
		}
	}
	if q.findUserByUUIDStmt != nil {
		if cerr := q.findUserByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findUserByUUIDStmt: %w", cerr)
		}
	}
	if q.findUsersStmt != nil {
		if cerr := q.findUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findUsersStmt: %w", cerr)
		}
	}
	if q.getDatasetContentByUUIDStmt != nil {
		if cerr := q.getDatasetContentByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDatasetContentByUUIDStmt: %w", cerr)
		}
	}
	if q.getNamedModuleCodeAtHeadStmt != nil {
		if cerr := q.getNamedModuleCodeAtHeadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNamedModuleCodeAtHeadStmt: %w", cerr)
		}
	}
	if q.getNamedModuleCodeAtRevisionStmt != nil {
		if cerr := q.getNamedModuleCodeAtRevisionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNamedModuleCodeAtRevisionStmt: %w", cerr)
		}
	}
	if q.getProgramCodeAtHeadStmt != nil {
		if cerr := q.getProgramCodeAtHeadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProgramCodeAtHeadStmt: %w", cerr)
		}
	}
	if q.getProgramCodeAtRevisionStmt != nil {
		if cerr := q.getProgramCodeAtRevisionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProgramCodeAtRevisionStmt: %w", cerr)
		}
	}
	if q.getSignedProgramCodeAtHeadStmt != nil {
		if cerr := q.getSignedProgramCodeAtHeadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSignedProgramCodeAtHeadStmt: %w", cerr)
		}
	}
	if q.getTimeseriesByUUIDStmt != nil {
		if cerr := q.getTimeseriesByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTimeseriesByUUIDStmt: %w", cerr)
		}
	}
	if q.getTsDataRangeStmt != nil {
		if cerr := q.getTsDataRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTsDataRangeStmt: %w", cerr)
		}
	}
	if q.getUnitFromTimeseriesStmt != nil {
		if cerr := q.getUnitFromTimeseriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUnitFromTimeseriesStmt: %w", cerr)
		}
	}
	if q.getUserUuidFromTokenStmt != nil {
		if cerr := q.getUserUuidFromTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserUuidFromTokenStmt: %w", cerr)
		}
	}
	if q.removeUserFromAllGroupsStmt != nil {
		if cerr := q.removeUserFromAllGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeUserFromAllGroupsStmt: %w", cerr)
		}
	}
	if q.removeUserFromGroupsStmt != nil {
		if cerr := q.removeUserFromGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeUserFromGroupsStmt: %w", cerr)
		}
	}
	if q.setDatasetContentByUUIDStmt != nil {
		if cerr := q.setDatasetContentByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setDatasetContentByUUIDStmt: %w", cerr)
		}
	}
	if q.setDatasetFormatByUUIDStmt != nil {
		if cerr := q.setDatasetFormatByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setDatasetFormatByUUIDStmt: %w", cerr)
		}
	}
	if q.setDatasetNameByUUIDStmt != nil {
		if cerr := q.setDatasetNameByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setDatasetNameByUUIDStmt: %w", cerr)
		}
	}
	if q.setDatasetTagsStmt != nil {
		if cerr := q.setDatasetTagsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setDatasetTagsStmt: %w", cerr)
		}
	}
	if q.setGroupNameByUUIDStmt != nil {
		if cerr := q.setGroupNameByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setGroupNameByUUIDStmt: %w", cerr)
		}
	}
	if q.setPolicyActionStmt != nil {
		if cerr := q.setPolicyActionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setPolicyActionStmt: %w", cerr)
		}
	}
	if q.setPolicyEffectStmt != nil {
		if cerr := q.setPolicyEffectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setPolicyEffectStmt: %w", cerr)
		}
	}
	if q.setPolicyGroupStmt != nil {
		if cerr := q.setPolicyGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setPolicyGroupStmt: %w", cerr)
		}
	}
	if q.setPolicyPriorityStmt != nil {
		if cerr := q.setPolicyPriorityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setPolicyPriorityStmt: %w", cerr)
		}
	}
	if q.setPolicyResourceStmt != nil {
		if cerr := q.setPolicyResourceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setPolicyResourceStmt: %w", cerr)
		}
	}
	if q.setProgramDeadlineByUUIDStmt != nil {
		if cerr := q.setProgramDeadlineByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setProgramDeadlineByUUIDStmt: %w", cerr)
		}
	}
	if q.setProgramLanguageByUUIDStmt != nil {
		if cerr := q.setProgramLanguageByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setProgramLanguageByUUIDStmt: %w", cerr)
		}
	}
	if q.setProgramNameByUUIDStmt != nil {
		if cerr := q.setProgramNameByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setProgramNameByUUIDStmt: %w", cerr)
		}
	}
	if q.setProgramScheduleByUUIDStmt != nil {
		if cerr := q.setProgramScheduleByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setProgramScheduleByUUIDStmt: %w", cerr)
		}
	}
	if q.setProgramStateByUUIDStmt != nil {
		if cerr := q.setProgramStateByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setProgramStateByUUIDStmt: %w", cerr)
		}
	}
	if q.setProgramTagsStmt != nil {
		if cerr := q.setProgramTagsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setProgramTagsStmt: %w", cerr)
		}
	}
	if q.setProgramTypeByUUIDStmt != nil {
		if cerr := q.setProgramTypeByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setProgramTypeByUUIDStmt: %w", cerr)
		}
	}
	if q.setThingNameByUUIDStmt != nil {
		if cerr := q.setThingNameByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setThingNameByUUIDStmt: %w", cerr)
		}
	}
	if q.setThingStateByUUIDStmt != nil {
		if cerr := q.setThingStateByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setThingStateByUUIDStmt: %w", cerr)
		}
	}
	if q.setThingTagsStmt != nil {
		if cerr := q.setThingTagsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setThingTagsStmt: %w", cerr)
		}
	}
	if q.setThingTypeByUUIDStmt != nil {
		if cerr := q.setThingTypeByUUIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setThingTypeByUUIDStmt: %w", cerr)
		}
	}
	if q.setTimeseriesLowerBoundStmt != nil {
		if cerr := q.setTimeseriesLowerBoundStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setTimeseriesLowerBoundStmt: %w", cerr)
		}
	}
	if q.setTimeseriesNameStmt != nil {
		if cerr := q.setTimeseriesNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setTimeseriesNameStmt: %w", cerr)
		}
	}
	if q.setTimeseriesSiUnitStmt != nil {
		if cerr := q.setTimeseriesSiUnitStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setTimeseriesSiUnitStmt: %w", cerr)
		}
	}
	if q.setTimeseriesTagsStmt != nil {
		if cerr := q.setTimeseriesTagsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setTimeseriesTagsStmt: %w", cerr)
		}
	}
	if q.setTimeseriesThingStmt != nil {
		if cerr := q.setTimeseriesThingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setTimeseriesThingStmt: %w", cerr)
		}
	}
	if q.setTimeseriesUpperBoundStmt != nil {
		if cerr := q.setTimeseriesUpperBoundStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setTimeseriesUpperBoundStmt: %w", cerr)
		}
	}
	if q.setUserNameStmt != nil {
		if cerr := q.setUserNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setUserNameStmt: %w", cerr)
		}
	}
	if q.signProgramCodeRevisionStmt != nil {
		if cerr := q.signProgramCodeRevisionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing signProgramCodeRevisionStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                               DBTX
	tx                               *sql.Tx
	addTokenToUserStmt               *sql.Stmt
	addUserToGroupStmt               *sql.Stmt
	checkUserTokenHasAccessStmt      *sql.Stmt
	createCodeRevisionStmt           *sql.Stmt
	createDatasetStmt                *sql.Stmt
	createGroupStmt                  *sql.Stmt
	createPolicyStmt                 *sql.Stmt
	createProgramStmt                *sql.Stmt
	createThingStmt                  *sql.Stmt
	createTimeseriesStmt             *sql.Stmt
	createTsDataStmt                 *sql.Stmt
	createUserStmt                   *sql.Stmt
	createUserTokenStmt              *sql.Stmt
	deleteAllTsDataStmt              *sql.Stmt
	deleteDatasetStmt                *sql.Stmt
	deleteGroupStmt                  *sql.Stmt
	deletePolicyByUUIDStmt           *sql.Stmt
	deleteProgramStmt                *sql.Stmt
	deleteProgramCodeRevisionStmt    *sql.Stmt
	deleteThingStmt                  *sql.Stmt
	deleteTimeseriesStmt             *sql.Stmt
	deleteTokenFromUserStmt          *sql.Stmt
	deleteTsDataRangeStmt            *sql.Stmt
	deleteUserStmt                   *sql.Stmt
	existsDatasetStmt                *sql.Stmt
	existsGroupStmt                  *sql.Stmt
	existsPolicyStmt                 *sql.Stmt
	existsProgramStmt                *sql.Stmt
	existsThingStmt                  *sql.Stmt
	existsTimeseriesStmt             *sql.Stmt
	existsUserStmt                   *sql.Stmt
	findAllModulesStmt               *sql.Stmt
	findAllRoutineRevisionsStmt      *sql.Stmt
	findDatasetByThingStmt           *sql.Stmt
	findDatasetByUUIDStmt            *sql.Stmt
	findDatasetsStmt                 *sql.Stmt
	findDatasetsByTagsStmt           *sql.Stmt
	findGroupByUuidStmt              *sql.Stmt
	findGroupsStmt                   *sql.Stmt
	findGroupsByUserStmt             *sql.Stmt
	findPoliciesStmt                 *sql.Stmt
	findPoliciesByGroupStmt          *sql.Stmt
	findPoliciesByUserStmt           *sql.Stmt
	findPolicyByUUIDStmt             *sql.Stmt
	findProgramByUUIDStmt            *sql.Stmt
	findProgramCodeRevisionsStmt     *sql.Stmt
	findProgramsStmt                 *sql.Stmt
	findProgramsByTagsStmt           *sql.Stmt
	findThingByUUIDStmt              *sql.Stmt
	findThingsStmt                   *sql.Stmt
	findThingsByTagsStmt             *sql.Stmt
	findTimeseriesStmt               *sql.Stmt
	findTimeseriesByTagsStmt         *sql.Stmt
	findTimeseriesByThingStmt        *sql.Stmt
	findTimeseriesByUUIDStmt         *sql.Stmt
	findTokensByUserStmt             *sql.Stmt
	findUserByUUIDStmt               *sql.Stmt
	findUsersStmt                    *sql.Stmt
	getDatasetContentByUUIDStmt      *sql.Stmt
	getNamedModuleCodeAtHeadStmt     *sql.Stmt
	getNamedModuleCodeAtRevisionStmt *sql.Stmt
	getProgramCodeAtHeadStmt         *sql.Stmt
	getProgramCodeAtRevisionStmt     *sql.Stmt
	getSignedProgramCodeAtHeadStmt   *sql.Stmt
	getTimeseriesByUUIDStmt          *sql.Stmt
	getTsDataRangeStmt               *sql.Stmt
	getUnitFromTimeseriesStmt        *sql.Stmt
	getUserUuidFromTokenStmt         *sql.Stmt
	removeUserFromAllGroupsStmt      *sql.Stmt
	removeUserFromGroupsStmt         *sql.Stmt
	setDatasetContentByUUIDStmt      *sql.Stmt
	setDatasetFormatByUUIDStmt       *sql.Stmt
	setDatasetNameByUUIDStmt         *sql.Stmt
	setDatasetTagsStmt               *sql.Stmt
	setGroupNameByUUIDStmt           *sql.Stmt
	setPolicyActionStmt              *sql.Stmt
	setPolicyEffectStmt              *sql.Stmt
	setPolicyGroupStmt               *sql.Stmt
	setPolicyPriorityStmt            *sql.Stmt
	setPolicyResourceStmt            *sql.Stmt
	setProgramDeadlineByUUIDStmt     *sql.Stmt
	setProgramLanguageByUUIDStmt     *sql.Stmt
	setProgramNameByUUIDStmt         *sql.Stmt
	setProgramScheduleByUUIDStmt     *sql.Stmt
	setProgramStateByUUIDStmt        *sql.Stmt
	setProgramTagsStmt               *sql.Stmt
	setProgramTypeByUUIDStmt         *sql.Stmt
	setThingNameByUUIDStmt           *sql.Stmt
	setThingStateByUUIDStmt          *sql.Stmt
	setThingTagsStmt                 *sql.Stmt
	setThingTypeByUUIDStmt           *sql.Stmt
	setTimeseriesLowerBoundStmt      *sql.Stmt
	setTimeseriesNameStmt            *sql.Stmt
	setTimeseriesSiUnitStmt          *sql.Stmt
	setTimeseriesTagsStmt            *sql.Stmt
	setTimeseriesThingStmt           *sql.Stmt
	setTimeseriesUpperBoundStmt      *sql.Stmt
	setUserNameStmt                  *sql.Stmt
	signProgramCodeRevisionStmt      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                               tx,
		tx:                               tx,
		addTokenToUserStmt:               q.addTokenToUserStmt,
		addUserToGroupStmt:               q.addUserToGroupStmt,
		checkUserTokenHasAccessStmt:      q.checkUserTokenHasAccessStmt,
		createCodeRevisionStmt:           q.createCodeRevisionStmt,
		createDatasetStmt:                q.createDatasetStmt,
		createGroupStmt:                  q.createGroupStmt,
		createPolicyStmt:                 q.createPolicyStmt,
		createProgramStmt:                q.createProgramStmt,
		createThingStmt:                  q.createThingStmt,
		createTimeseriesStmt:             q.createTimeseriesStmt,
		createTsDataStmt:                 q.createTsDataStmt,
		createUserStmt:                   q.createUserStmt,
		createUserTokenStmt:              q.createUserTokenStmt,
		deleteAllTsDataStmt:              q.deleteAllTsDataStmt,
		deleteDatasetStmt:                q.deleteDatasetStmt,
		deleteGroupStmt:                  q.deleteGroupStmt,
		deletePolicyByUUIDStmt:           q.deletePolicyByUUIDStmt,
		deleteProgramStmt:                q.deleteProgramStmt,
		deleteProgramCodeRevisionStmt:    q.deleteProgramCodeRevisionStmt,
		deleteThingStmt:                  q.deleteThingStmt,
		deleteTimeseriesStmt:             q.deleteTimeseriesStmt,
		deleteTokenFromUserStmt:          q.deleteTokenFromUserStmt,
		deleteTsDataRangeStmt:            q.deleteTsDataRangeStmt,
		deleteUserStmt:                   q.deleteUserStmt,
		existsDatasetStmt:                q.existsDatasetStmt,
		existsGroupStmt:                  q.existsGroupStmt,
		existsPolicyStmt:                 q.existsPolicyStmt,
		existsProgramStmt:                q.existsProgramStmt,
		existsThingStmt:                  q.existsThingStmt,
		existsTimeseriesStmt:             q.existsTimeseriesStmt,
		existsUserStmt:                   q.existsUserStmt,
		findAllModulesStmt:               q.findAllModulesStmt,
		findAllRoutineRevisionsStmt:      q.findAllRoutineRevisionsStmt,
		findDatasetByThingStmt:           q.findDatasetByThingStmt,
		findDatasetByUUIDStmt:            q.findDatasetByUUIDStmt,
		findDatasetsStmt:                 q.findDatasetsStmt,
		findDatasetsByTagsStmt:           q.findDatasetsByTagsStmt,
		findGroupByUuidStmt:              q.findGroupByUuidStmt,
		findGroupsStmt:                   q.findGroupsStmt,
		findGroupsByUserStmt:             q.findGroupsByUserStmt,
		findPoliciesStmt:                 q.findPoliciesStmt,
		findPoliciesByGroupStmt:          q.findPoliciesByGroupStmt,
		findPoliciesByUserStmt:           q.findPoliciesByUserStmt,
		findPolicyByUUIDStmt:             q.findPolicyByUUIDStmt,
		findProgramByUUIDStmt:            q.findProgramByUUIDStmt,
		findProgramCodeRevisionsStmt:     q.findProgramCodeRevisionsStmt,
		findProgramsStmt:                 q.findProgramsStmt,
		findProgramsByTagsStmt:           q.findProgramsByTagsStmt,
		findThingByUUIDStmt:              q.findThingByUUIDStmt,
		findThingsStmt:                   q.findThingsStmt,
		findThingsByTagsStmt:             q.findThingsByTagsStmt,
		findTimeseriesStmt:               q.findTimeseriesStmt,
		findTimeseriesByTagsStmt:         q.findTimeseriesByTagsStmt,
		findTimeseriesByThingStmt:        q.findTimeseriesByThingStmt,
		findTimeseriesByUUIDStmt:         q.findTimeseriesByUUIDStmt,
		findTokensByUserStmt:             q.findTokensByUserStmt,
		findUserByUUIDStmt:               q.findUserByUUIDStmt,
		findUsersStmt:                    q.findUsersStmt,
		getDatasetContentByUUIDStmt:      q.getDatasetContentByUUIDStmt,
		getNamedModuleCodeAtHeadStmt:     q.getNamedModuleCodeAtHeadStmt,
		getNamedModuleCodeAtRevisionStmt: q.getNamedModuleCodeAtRevisionStmt,
		getProgramCodeAtHeadStmt:         q.getProgramCodeAtHeadStmt,
		getProgramCodeAtRevisionStmt:     q.getProgramCodeAtRevisionStmt,
		getSignedProgramCodeAtHeadStmt:   q.getSignedProgramCodeAtHeadStmt,
		getTimeseriesByUUIDStmt:          q.getTimeseriesByUUIDStmt,
		getTsDataRangeStmt:               q.getTsDataRangeStmt,
		getUnitFromTimeseriesStmt:        q.getUnitFromTimeseriesStmt,
		getUserUuidFromTokenStmt:         q.getUserUuidFromTokenStmt,
		removeUserFromAllGroupsStmt:      q.removeUserFromAllGroupsStmt,
		removeUserFromGroupsStmt:         q.removeUserFromGroupsStmt,
		setDatasetContentByUUIDStmt:      q.setDatasetContentByUUIDStmt,
		setDatasetFormatByUUIDStmt:       q.setDatasetFormatByUUIDStmt,
		setDatasetNameByUUIDStmt:         q.setDatasetNameByUUIDStmt,
		setDatasetTagsStmt:               q.setDatasetTagsStmt,
		setGroupNameByUUIDStmt:           q.setGroupNameByUUIDStmt,
		setPolicyActionStmt:              q.setPolicyActionStmt,
		setPolicyEffectStmt:              q.setPolicyEffectStmt,
		setPolicyGroupStmt:               q.setPolicyGroupStmt,
		setPolicyPriorityStmt:            q.setPolicyPriorityStmt,
		setPolicyResourceStmt:            q.setPolicyResourceStmt,
		setProgramDeadlineByUUIDStmt:     q.setProgramDeadlineByUUIDStmt,
		setProgramLanguageByUUIDStmt:     q.setProgramLanguageByUUIDStmt,
		setProgramNameByUUIDStmt:         q.setProgramNameByUUIDStmt,
		setProgramScheduleByUUIDStmt:     q.setProgramScheduleByUUIDStmt,
		setProgramStateByUUIDStmt:        q.setProgramStateByUUIDStmt,
		setProgramTagsStmt:               q.setProgramTagsStmt,
		setProgramTypeByUUIDStmt:         q.setProgramTypeByUUIDStmt,
		setThingNameByUUIDStmt:           q.setThingNameByUUIDStmt,
		setThingStateByUUIDStmt:          q.setThingStateByUUIDStmt,
		setThingTagsStmt:                 q.setThingTagsStmt,
		setThingTypeByUUIDStmt:           q.setThingTypeByUUIDStmt,
		setTimeseriesLowerBoundStmt:      q.setTimeseriesLowerBoundStmt,
		setTimeseriesNameStmt:            q.setTimeseriesNameStmt,
		setTimeseriesSiUnitStmt:          q.setTimeseriesSiUnitStmt,
		setTimeseriesTagsStmt:            q.setTimeseriesTagsStmt,
		setTimeseriesThingStmt:           q.setTimeseriesThingStmt,
		setTimeseriesUpperBoundStmt:      q.setTimeseriesUpperBoundStmt,
		setUserNameStmt:                  q.setUserNameStmt,
		signProgramCodeRevisionStmt:      q.signProgramCodeRevisionStmt,
	}
}
