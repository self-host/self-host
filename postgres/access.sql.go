// Code generated by sqlc. DO NOT EDIT.
// source: access.sql

package postgresql

import (
	"context"
)

const checkUserTokenHasAccess = `-- name: CheckUserTokenHasAccess :one
WITH usr AS (
  SELECT users.uuid
  FROM users, user_tokens
  WHERE user_tokens.user_uuid = users.uuid
  AND user_tokens.token_hash = sha256($3)
  LIMIT 1
) SELECT COALESCE((SELECT user_has_access(
  usr.uuid,
  $1::policy_action,
  $2::TEXT
) FROM usr LIMIT 1), false)::boolean AS access
`

type CheckUserTokenHasAccessParams struct {
	Action   PolicyAction
	Resource string
	Token    []byte
}

func (q *Queries) CheckUserTokenHasAccess(ctx context.Context, arg CheckUserTokenHasAccessParams) (bool, error) {
	row := q.queryRow(ctx, q.checkUserTokenHasAccessStmt, checkUserTokenHasAccess, arg.Action, arg.Resource, arg.Token)
	var access bool
	err := row.Scan(&access)
	return access, err
}
