// Package selfpmgr provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package selfpmgr

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get module
	// (GET /v1/library)
	GetModuleAtRevision(w http.ResponseWriter, r *http.Request, params GetModuleAtRevisionParams)
	// Subscribe as a worker.
	// (POST /v1/subscribers)
	WorkerSubscribe(w http.ResponseWriter, r *http.Request)
	// Unsubscribe as a worker
	// (DELETE /v1/subscribers/{uuid})
	WorkerUnsubscribe(w http.ResponseWriter, r *http.Request, uuid UuidParam)
	// Check if subscriber has been added
	// (GET /v1/subscribers/{uuid})
	CheckWorker(w http.ResponseWriter, r *http.Request, uuid UuidParam)
	// Proxy interface for webhooks
	// (POST /v1/webhooks/{domain}/{uuid})
	ForwardWebhook(w http.ResponseWriter, r *http.Request, domain DomainPathParam, uuid UuidParam)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetModuleAtRevision operation middleware
func (siw *ServerInterfaceWrapper) GetModuleAtRevision(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetModuleAtRevisionParams

	// ------------- Required query parameter "domain" -------------
	if paramValue := r.URL.Query().Get("domain"); paramValue != "" {

	} else {
		http.Error(w, "Query argument domain is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "domain", r.URL.Query(), &params.Domain)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter domain: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "module" -------------
	if paramValue := r.URL.Query().Get("module"); paramValue != "" {

	} else {
		http.Error(w, "Query argument module is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "module", r.URL.Query(), &params.Module)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter module: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "language" -------------
	if paramValue := r.URL.Query().Get("language"); paramValue != "" {

	} else {
		http.Error(w, "Query argument language is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "language", r.URL.Query(), &params.Language)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter language: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "revision" -------------
	if paramValue := r.URL.Query().Get("revision"); paramValue != "" {

	} else {
		http.Error(w, "Query argument revision is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "revision", r.URL.Query(), &params.Revision)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter revision: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetModuleAtRevision(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// WorkerSubscribe operation middleware
func (siw *ServerInterfaceWrapper) WorkerSubscribe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.WorkerSubscribe(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// WorkerUnsubscribe operation middleware
func (siw *ServerInterfaceWrapper) WorkerUnsubscribe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid UuidParam

	err = runtime.BindStyledParameter("simple", false, "uuid", chi.URLParam(r, "uuid"), &uuid)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter uuid: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.WorkerUnsubscribe(w, r, uuid)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CheckWorker operation middleware
func (siw *ServerInterfaceWrapper) CheckWorker(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid UuidParam

	err = runtime.BindStyledParameter("simple", false, "uuid", chi.URLParam(r, "uuid"), &uuid)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter uuid: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CheckWorker(w, r, uuid)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ForwardWebhook operation middleware
func (siw *ServerInterfaceWrapper) ForwardWebhook(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "domain" -------------
	var domain DomainPathParam

	err = runtime.BindStyledParameter("simple", false, "domain", chi.URLParam(r, "domain"), &domain)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter domain: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "uuid" -------------
	var uuid UuidParam

	err = runtime.BindStyledParameter("simple", false, "uuid", chi.URLParam(r, "uuid"), &uuid)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter uuid: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ForwardWebhook(w, r, domain, uuid)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/library", wrapper.GetModuleAtRevision)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/subscribers", wrapper.WorkerSubscribe)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/subscribers/{uuid}", wrapper.WorkerUnsubscribe)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/subscribers/{uuid}", wrapper.CheckWorker)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/webhooks/{domain}/{uuid}", wrapper.ForwardWebhook)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
