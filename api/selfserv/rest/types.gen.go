// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package rest

import (
	"time"
)

const (
	BasicAuthScopes = "BasicAuth.Scopes"
)

// Defines values for DatasetFormat.
const (
	DatasetFormatCsv DatasetFormat = "csv"

	DatasetFormatIni DatasetFormat = "ini"

	DatasetFormatJson DatasetFormat = "json"

	DatasetFormatMisc DatasetFormat = "misc"

	DatasetFormatToml DatasetFormat = "toml"

	DatasetFormatXml DatasetFormat = "xml"

	DatasetFormatYaml DatasetFormat = "yaml"
)

// Defines values for PolicyAction.
const (
	PolicyActionCreate PolicyAction = "create"

	PolicyActionDelete PolicyAction = "delete"

	PolicyActionRead PolicyAction = "read"

	PolicyActionUpdate PolicyAction = "update"
)

// Defines values for PolicyEffect.
const (
	PolicyEffectAllow PolicyEffect = "allow"

	PolicyEffectDeny PolicyEffect = "deny"
)

// Defines values for ProgramLanguage.
const (
	ProgramLanguageTengo ProgramLanguage = "tengo"
)

// Defines values for ProgramState.
const (
	ProgramStateActive ProgramState = "active"

	ProgramStateFailed ProgramState = "failed"

	ProgramStateInactive ProgramState = "inactive"
)

// Defines values for ProgramType.
const (
	ProgramTypeModule ProgramType = "module"

	ProgramTypeRoutine ProgramType = "routine"

	ProgramTypeWebhook ProgramType = "webhook"
)

// Defines values for ThingState.
const (
	ThingStateActive ThingState = "active"

	ThingStateArchived ThingState = "archived"

	ThingStateInactive ThingState = "inactive"

	ThingStatePassive ThingState = "passive"
)

// Alert defines model for Alert.
type Alert struct {
	Uuid *string `json:"uuid,omitempty"`
}

// CodeRevision defines model for CodeRevision.
type CodeRevision struct {
	Checksum string    `json:"checksum"`
	Created  time.Time `json:"created"`

	// User UUID
	CreatedBy string `json:"created_by"`

	// The revision number
	Revision int        `json:"revision"`
	Signed   *time.Time `json:"signed"`

	// User UUID
	SignedBy *string `json:"signed_by"`
}

// Dataset defines model for Dataset.
type Dataset struct {

	// UUID reference to a Thing as a way to track data-sets to things.
	BelongsTo *string `json:"belongs_to"`

	// Date-time when created, as defined by RFC 3339, section 5.6.
	Created time.Time `json:"created"`

	// User UUID reference.
	CreatedBy string `json:"created_by"`

	// File format of the data set.
	Format DatasetFormat `json:"format"`

	// Name of the resource. Does *not* have to be unique.
	Name string `json:"name"`

	// The size of the content in number of bytes.
	Size int64 `json:"size"`

	// Date-time of last change, as defined by RFC 3339, section 5.6.
	Updated time.Time `json:"updated"`

	// User UUID reference.
	UpdatedBy string `json:"updated_by"`

	// Unique identifier.
	Uuid string `json:"uuid"`
}

// File format of the data set.
type DatasetFormat string

// Domain defines model for Domain.
type Domain struct {
	Active *bool   `json:"active,omitempty"`
	Name   *string `json:"name,omitempty"`
	Uuid   *string `json:"uuid,omitempty"`
}

// Error defines model for Error.
type Error struct {

	// Error code
	Code int `json:"code"`

	// Error message
	Message string `json:"message"`
}

// Group defines model for Group.
type Group struct {
	Name string `json:"name"`
	Uuid string `json:"uuid"`
}

// Policy defines model for Policy.
type Policy struct {
	Action    PolicyAction `json:"action"`
	Effect    PolicyEffect `json:"effect"`
	GroupUuid string       `json:"group_uuid"`
	Priority  int32        `json:"priority"`
	Resource  string       `json:"resource"`
	Uuid      string       `json:"uuid"`
}

// PolicyAction defines model for Policy.Action.
type PolicyAction string

// PolicyEffect defines model for Policy.Effect.
type PolicyEffect string

// Program defines model for Program.
type Program struct {

	// Ignored for Modules. An duration (in milliseconds) after which a Program (routine, webhook) shall terminate, to avoid long running programs.
	Deadline int             `json:"deadline"`
	Language ProgramLanguage `json:"language"`
	Name     string          `json:"name"`

	// Ignored for Modules and Webhooks. An interval at which this Program (routine) shall execute. An interval string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "-1.5h" or "2h45m". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
	Schedule string       `json:"schedule"`
	State    ProgramState `json:"state"`

	// Routines are executed at an interval. Webhooks are called using the REST API. Modules are used by Routines and Webhooks to extend their functionality.
	Type ProgramType `json:"type"`
	Uuid string      `json:"uuid"`
}

// ProgramLanguage defines model for Program.Language.
type ProgramLanguage string

// ProgramState defines model for Program.State.
type ProgramState string

// Routines are executed at an interval. Webhooks are called using the REST API. Modules are used by Routines and Webhooks to extend their functionality.
type ProgramType string

// Thing defines model for Thing.
type Thing struct {

	// Reference to a User
	CreatedBy string     `json:"created_by"`
	Name      string     `json:"name"`
	State     ThingState `json:"state"`
	Type      *string    `json:"type"`
	Uuid      string     `json:"uuid"`
}

// ThingState defines model for Thing.State.
type ThingState string

// Timeseries defines model for Timeseries.
type Timeseries struct {
	CreatedBy  string   `json:"created_by"`
	LowerBound *float64 `json:"lower_bound"`
	Name       string   `json:"name"`
	SiUnit     string   `json:"si_unit"`
	Tags       []string `json:"tags"`
	ThingUuid  *string  `json:"thing_uuid"`
	UpperBound *float64 `json:"upper_bound"`
	Uuid       string   `json:"uuid"`
}

// Token defines model for Token.
type Token struct {
	Created time.Time `json:"created"`
	Name    string    `json:"name"`
	Uuid    string    `json:"uuid"`
}

// TokenWithSecret defines model for TokenWithSecret.
type TokenWithSecret struct {
	Name   string `json:"name"`
	Secret string `json:"secret"`
	Uuid   string `json:"uuid"`
}

// TsQuery defines model for TsQuery.
type TsQuery struct {
	Data *[]struct {

		// Date-time when created, as defined by RFC 3339, section 5.6.
		Ts *time.Time `json:"ts,omitempty"`

		// Any number
		V *float32 `json:"v,omitempty"`
	} `json:"data,omitempty"`

	// Reference to a Timeseries
	TimeseriesUuid *string `json:"timeseries_uuid,omitempty"`
}

// TsRow defines model for TsRow.
type TsRow struct {

	// Date-time when created, as defined by RFC 3339, section 5.6.
	Ts time.Time `json:"ts"`

	// Any number
	V float32 `json:"v"`
}

// User defines model for User.
type User struct {
	Groups []Group `json:"groups"`
	Name   string  `json:"name"`
	Uuid   string  `json:"uuid"`
}

// GreaterOrEqParam defines model for greaterOrEqParam.
type GreaterOrEqParam float32

// LessOrEqParam defines model for lessOrEqParam.
type LessOrEqParam float32

// LimitParam defines model for limitParam.
type LimitParam int64

// OffsetParam defines model for offsetParam.
type OffsetParam int64

// RangeEndParam defines model for rangeEndParam.
type RangeEndParam time.Time

// RangeStartParam defines model for rangeStartParam.
type RangeStartParam time.Time

// SiUnitParam defines model for siUnitParam.
type SiUnitParam string

// UuidParam defines model for uuidParam.
type UuidParam string

// BadRequest defines model for BadRequest.
type BadRequest Error

// Forbidden defines model for Forbidden.
type Forbidden Error

// InternalServerError defines model for InternalServerError.
type InternalServerError Error

// NotFound defines model for NotFound.
type NotFound Error

// TooManyRequests defines model for TooManyRequests.
type TooManyRequests Error

// Unauthorized defines model for Unauthorized.
type Unauthorized Error

// NewDataset defines model for NewDataset.
type NewDataset struct {

	// A reference to a Thing
	BelongsTo *string `json:"belongs_to"`

	// Content of the resource.
	Content *[]byte          `json:"content"`
	Format  NewDatasetFormat `json:"format"`
	Name    string           `json:"name"`
}

// NewGroup defines model for NewGroup.
type NewGroup struct {

	// Name of the group
	Name string `json:"name"`
}

// NewPolicy defines model for NewPolicy.
type NewPolicy struct {
	Action    NewPolicyAction `json:"action"`
	Effect    NewPolicyEffect `json:"effect"`
	GroupUuid string          `json:"group_uuid"`
	Priority  int             `json:"priority"`
	Resource  string          `json:"resource"`
}

// NewProgram defines model for NewProgram.
type NewProgram struct {

	// Ignored for Modules. An duration (in milliseconds) after which a Program (routine, webhook) shall terminate, to avoid long running programs.
	Deadline int                `json:"deadline"`
	Language NewProgramLanguage `json:"language"`
	Name     string             `json:"name"`

	// Ignored for Modules and Webhooks. An interval at which this Program (routine) shall execute. An interval string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "-1.5h" or "2h45m". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
	Schedule string          `json:"schedule"`
	State    NewProgramState `json:"state"`

	// Routines are executed at an interval. Webhooks are called using the REST API. Modules are used by Routines and Webhooks to extend their functionality.
	Type NewProgramType `json:"type"`
}

// NewThing defines model for NewThing.
type NewThing struct {

	// Name of the thing
	Name string `json:"name"`

	// Thing type declaration
	Type *string `json:"type,omitempty"`
}

// NewTimeseries defines model for NewTimeseries.
type NewTimeseries struct {
	LowerBound *float64 `json:"lower_bound,omitempty"`

	// Name of the time series
	Name string `json:"name"`

	// The SI unit assigned to this time series.
	SiUnit string    `json:"si_unit"`
	Tags   *[]string `json:"tags,omitempty"`

	// Optional reference to a thing
	ThingUuid  *string  `json:"thing_uuid"`
	UpperBound *float64 `json:"upper_bound,omitempty"`
}

// NewToken defines model for NewToken.
type NewToken struct {

	// Name/label for the Token
	Name string `json:"name"`
}

// NewTsData defines model for NewTsData.
type NewTsData []TsRow

// NewUser defines model for NewUser.
type NewUser struct {

	// Name of the user
	Name string `json:"name"`
}

// The max allowed size of the complete request body is 1048576 bytes (1 MB). Performing a request with a Content-Length over this limit will result in a 400, malformed request error.
type UpdateDataset struct {

	// Base64 encoded content. Used for smaller uploads.
	Content *[]byte              `json:"content,omitempty"`
	Format  *UpdateDatasetFormat `json:"format,omitempty"`
	Name    *string              `json:"name,omitempty"`
}

// UpdateGroup defines model for UpdateGroup.
type UpdateGroup struct {
	Name string `json:"name"`
}

// UpdatePolicy defines model for UpdatePolicy.
type UpdatePolicy struct {
	Action    *UpdatePolicyAction `json:"action,omitempty"`
	Effect    *UpdatePolicyEffect `json:"effect,omitempty"`
	GroupUuid *string             `json:"group_uuid,omitempty"`
	Priority  *int                `json:"priority,omitempty"`
	Resource  *string             `json:"resource,omitempty"`
}

// UpdateProgram defines model for UpdateProgram.
type UpdateProgram struct {

	// Ignored for Modules. An duration (in milliseconds) after which a Program (routine, webhook) shall terminate, to avoid long running programs.
	Deadline *int                   `json:"deadline,omitempty"`
	Language *UpdateProgramLanguage `json:"language,omitempty"`
	Name     *string                `json:"name,omitempty"`

	// Ignored for Modules and Webhooks. An interval at which this Program (routine) shall execute. An interval string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "-1.5h" or "2h45m". Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
	Schedule *string             `json:"schedule,omitempty"`
	State    *UpdateProgramState `json:"state,omitempty"`

	// Routines are executed at an interval. Webhooks are called using the REST API. Modules are used by Routines and Webhooks to extend their functionality.
	Type *UpdateProgramType `json:"type,omitempty"`
}

// UpdateRequestRate defines model for UpdateRequestRate.
type UpdateRequestRate struct {
	Rate *float32 `json:"rate,omitempty"`
}

// UpdateThing defines model for UpdateThing.
type UpdateThing struct {

	// The name of the Thing.
	Name *string `json:"name,omitempty"`

	// The state of the thing.
	State *UpdateThingState `json:"state,omitempty"`

	// A text label to organize Things into different types.
	Type *string `json:"type"`
}

// UpdateTimeseries defines model for UpdateTimeseries.
type UpdateTimeseries struct {

	// An optional lower bound at which values are accepted and stored. Values *less* than this will be rejected.
	LowerBound *float64 `json:"lower_bound"`

	// Name of the time-series.
	Name *string `json:"name,omitempty"`

	// SI unit.
	SiUnit *string `json:"si_unit,omitempty"`

	// An array of text labels (tags) for tracking and filtering purposes.
	Tags *[]string `json:"tags,omitempty"`

	// Optional reference to a Thing.
	ThingUuid *string `json:"thing_uuid"`

	// An optional upper bound at which values are accepted and stored. Values *greater* than this will be rejected.
	UpperBound *float64 `json:"upper_bound"`
}

// UpdateUser defines model for UpdateUser.
type UpdateUser struct {

	// Set the user groups. This parameter is incompatible with `groups_add` and `groups_remove`.
	Groups *[]string `json:"groups,omitempty"`

	// Add the user to these groups. This parameter is incompatible with `groups`.
	GroupsAdd *[]string `json:"groups_add,omitempty"`

	// Remove the user from these groups. This parameter is incompatible with `groups`.
	GroupsRemove *[]string `json:"groups_remove,omitempty"`
	Name         *string   `json:"name,omitempty"`
}

// FindAlertsParams defines parameters for FindAlerts.
type FindAlertsParams struct {

	// The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `json:"offset,omitempty"`

	// The numbers of items to return.
	Limit *LimitParam `json:"limit,omitempty"`
}

// FindDatasetsParams defines parameters for FindDatasets.
type FindDatasetsParams struct {

	// The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `json:"offset,omitempty"`

	// The numbers of items to return.
	Limit *LimitParam `json:"limit,omitempty"`
}

// AddDatasetsJSONBodyFormat defines parameters for AddDatasets.
type AddDatasetsJSONBodyFormat string

// UpdateDatasetByUuidJSONBodyFormat defines parameters for UpdateDatasetByUuid.
type UpdateDatasetByUuidJSONBodyFormat string

// AssembleDatasetPartsByKeyParams defines parameters for AssembleDatasetPartsByKey.
type AssembleDatasetPartsByKeyParams struct {
	PartNumber int    `json:"partNumber"`
	UploadId   string `json:"uploadId"`
	ContentMD5 string `json:"Content-MD5"`
}

// ListDatasetPartsByKeyParams defines parameters for ListDatasetPartsByKey.
type ListDatasetPartsByKeyParams struct {
	Key string `json:"key"`
}

// UploadDatasetContentByKeyParams defines parameters for UploadDatasetContentByKey.
type UploadDatasetContentByKeyParams struct {
	PartNumber int    `json:"partNumber"`
	UploadId   string `json:"uploadId"`
	ContentMD5 string `json:"Content-MD5"`
}

// DeleteDatasetUploadByKeyParams defines parameters for DeleteDatasetUploadByKey.
type DeleteDatasetUploadByKeyParams struct {
	Key string `json:"key"`
}

// FindGroupsParams defines parameters for FindGroups.
type FindGroupsParams struct {

	// The numbers of items to return.
	Limit *LimitParam `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `json:"offset,omitempty"`
}

// FindPoliciesParams defines parameters for FindPolicies.
type FindPoliciesParams struct {

	// The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `json:"offset,omitempty"`

	// The numbers of items to return.
	Limit *LimitParam `json:"limit,omitempty"`

	// Group(s) to filter on
	GroupUuids *[]string `json:"group_uuids,omitempty"`
}

// AddPolicyJSONBodyAction defines parameters for AddPolicy.
type AddPolicyJSONBodyAction string

// AddPolicyJSONBodyEffect defines parameters for AddPolicy.
type AddPolicyJSONBodyEffect string

// UpdatePolicyByUuidJSONBodyAction defines parameters for UpdatePolicyByUuid.
type UpdatePolicyByUuidJSONBodyAction string

// UpdatePolicyByUuidJSONBodyEffect defines parameters for UpdatePolicyByUuid.
type UpdatePolicyByUuidJSONBodyEffect string

// FindProgramsParams defines parameters for FindPrograms.
type FindProgramsParams struct {

	// The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `json:"offset,omitempty"`

	// The numbers of items to return.
	Limit *LimitParam `json:"limit,omitempty"`
}

// AddProgramJSONBodyLanguage defines parameters for AddProgram.
type AddProgramJSONBodyLanguage string

// AddProgramJSONBodyState defines parameters for AddProgram.
type AddProgramJSONBodyState string

// AddProgramJSONBodyType defines parameters for AddProgram.
type AddProgramJSONBodyType string

// UpdateProgramByUuidJSONBodyLanguage defines parameters for UpdateProgramByUuid.
type UpdateProgramByUuidJSONBodyLanguage string

// UpdateProgramByUuidJSONBodyState defines parameters for UpdateProgramByUuid.
type UpdateProgramByUuidJSONBodyState string

// UpdateProgramByUuidJSONBodyType defines parameters for UpdateProgramByUuid.
type UpdateProgramByUuidJSONBodyType string

// GetProgramCodeRevisionsDiffParams defines parameters for GetProgramCodeRevisionsDiff.
type GetProgramCodeRevisionsDiffParams struct {

	// Revision A
	RevA int `json:"rev_a"`

	// Revision B
	RevB int `json:"rev_b"`
}

// FindThingsParams defines parameters for FindThings.
type FindThingsParams struct {

	// The numbers of items to return.
	Limit *LimitParam `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `json:"offset,omitempty"`
}

// UpdateThingByUuidJSONBodyState defines parameters for UpdateThingByUuid.
type UpdateThingByUuidJSONBodyState string

// FindTimeSeriesParams defines parameters for FindTimeSeries.
type FindTimeSeriesParams struct {

	// The numbers of items to return.
	Limit *LimitParam `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `json:"offset,omitempty"`

	// Array of tags to filter on
	Tags *[]string `json:"tags,omitempty"`
}

// DeleteDataFromTimeSeriesParams defines parameters for DeleteDataFromTimeSeries.
type DeleteDataFromTimeSeriesParams struct {

	// Start of time period. The period (start to end) can **not** exceed 1 year. Defaults to `now`.
	Start RangeStartParam `json:"start"`

	// End of time period. The period (start to end) can **not** exceed 1 year. Defaults to `now`.
	End RangeEndParam `json:"end"`

	// Value should be greater or equal to (>=) this.
	Ge *GreaterOrEqParam `json:"ge,omitempty"`

	// Value should be less or equal to (<=) this.
	Le *LessOrEqParam `json:"le,omitempty"`
}

// QueryTimeseriesForDataParams defines parameters for QueryTimeseriesForData.
type QueryTimeseriesForDataParams struct {

	// Start of time period. The period (start to end) can **not** exceed 1 year. Defaults to `now`.
	Start RangeStartParam `json:"start"`

	// End of time period. The period (start to end) can **not** exceed 1 year. Defaults to `now`.
	End RangeEndParam `json:"end"`

	// The SI unit of the result. A cast will occur if the base unit differes.
	Unit *SiUnitParam `json:"unit,omitempty"`

	// Value should be greater or equal to (>=) this.
	Ge *GreaterOrEqParam `json:"ge,omitempty"`

	// Value should be less or equal to (<=) this.
	Le *LessOrEqParam `json:"le,omitempty"`
}

// AddDataToTimeseriesParams defines parameters for AddDataToTimeseries.
type AddDataToTimeseriesParams struct {

	// The SI unit of the result. A cast will occur if the base unit differes.
	Unit *SiUnitParam `json:"unit,omitempty"`
}

// FindUsersParams defines parameters for FindUsers.
type FindUsersParams struct {

	// The numbers of items to return.
	Limit *LimitParam `json:"limit,omitempty"`

	// The number of items to skip before starting to collect the result set.
	Offset *OffsetParam `json:"offset,omitempty"`
}

// AddDatasetsJSONRequestBody defines body for AddDatasets for application/json ContentType.
type AddDatasetsJSONRequestBody NewDataset

// UpdateDatasetByUuidJSONRequestBody defines body for UpdateDatasetByUuid for application/json ContentType.
type UpdateDatasetByUuidJSONRequestBody UpdateDataset

// AddGroupJSONRequestBody defines body for AddGroup for application/json ContentType.
type AddGroupJSONRequestBody NewGroup

// UpdateGroupByUuidJSONRequestBody defines body for UpdateGroupByUuid for application/json ContentType.
type UpdateGroupByUuidJSONRequestBody UpdateGroup

// AddPolicyJSONRequestBody defines body for AddPolicy for application/json ContentType.
type AddPolicyJSONRequestBody NewPolicy

// UpdatePolicyByUuidJSONRequestBody defines body for UpdatePolicyByUuid for application/json ContentType.
type UpdatePolicyByUuidJSONRequestBody UpdatePolicy

// AddProgramJSONRequestBody defines body for AddProgram for application/json ContentType.
type AddProgramJSONRequestBody NewProgram

// UpdateProgramByUuidJSONRequestBody defines body for UpdateProgramByUuid for application/json ContentType.
type UpdateProgramByUuidJSONRequestBody UpdateProgram

// AddThingJSONRequestBody defines body for AddThing for application/json ContentType.
type AddThingJSONRequestBody NewThing

// UpdateThingByUuidJSONRequestBody defines body for UpdateThingByUuid for application/json ContentType.
type UpdateThingByUuidJSONRequestBody UpdateThing

// AddTimeSeriesJSONRequestBody defines body for AddTimeSeries for application/json ContentType.
type AddTimeSeriesJSONRequestBody NewTimeseries

// UpdateTimeseriesByUuidJSONRequestBody defines body for UpdateTimeseriesByUuid for application/json ContentType.
type UpdateTimeseriesByUuidJSONRequestBody UpdateTimeseries

// AddDataToTimeseriesJSONRequestBody defines body for AddDataToTimeseries for application/json ContentType.
type AddDataToTimeseriesJSONRequestBody NewTsData

// AddUserJSONRequestBody defines body for AddUser for application/json ContentType.
type AddUserJSONRequestBody NewUser

// UpdateUserByUuidJSONRequestBody defines body for UpdateUserByUuid for application/json ContentType.
type UpdateUserByUuidJSONRequestBody UpdateUser

// SetRequestRateForUserJSONRequestBody defines body for SetRequestRateForUser for application/json ContentType.
type SetRequestRateForUserJSONRequestBody UpdateRequestRate

// AddNewTokenToUserJSONRequestBody defines body for AddNewTokenToUser for application/json ContentType.
type AddNewTokenToUserJSONRequestBody NewToken
