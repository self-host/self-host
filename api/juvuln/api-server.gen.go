// Package juvuln provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package juvuln

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get module
	// (GET /v1/library)
	GetModuleAtRevision(w http.ResponseWriter, r *http.Request, params GetModuleAtRevisionParams)
	// Subscribe as a worker.
	// (POST /v1/subscribers)
	WorkerSubscribe(w http.ResponseWriter, r *http.Request)
	// Unsubscribe as a worker
	// (DELETE /v1/subscribers/{uuid})
	WorkerUnsubscribe(w http.ResponseWriter, r *http.Request, uuid UuidParam)
	// Check if subscriber has been added
	// (GET /v1/subscribers/{uuid})
	CheckWorker(w http.ResponseWriter, r *http.Request, uuid UuidParam)
	// Update Load Data
	// (PUT /v1/subscribers/{uuid}/load)
	WorkerLoadUpdate(w http.ResponseWriter, r *http.Request, uuid UuidParam)
	// Proxy interface for webhooks
	// (POST /v1/webhooks/{domain}/{uuid})
	ForwardWebhook(w http.ResponseWriter, r *http.Request, domain DomainPathParam, uuid UuidParam)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetModuleAtRevision operation middleware
func (siw *ServerInterfaceWrapper) GetModuleAtRevision(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetModuleAtRevisionParams

	// ------------- Required query parameter "domain" -------------
	if paramValue := r.URL.Query().Get("domain"); paramValue != "" {

	} else {
		http.Error(w, "Query argument domain is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "domain", r.URL.Query(), &params.Domain)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter domain: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "module" -------------
	if paramValue := r.URL.Query().Get("module"); paramValue != "" {

	} else {
		http.Error(w, "Query argument module is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "module", r.URL.Query(), &params.Module)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter module: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "language" -------------
	if paramValue := r.URL.Query().Get("language"); paramValue != "" {

	} else {
		http.Error(w, "Query argument language is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "language", r.URL.Query(), &params.Language)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter language: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "revision" -------------
	if paramValue := r.URL.Query().Get("revision"); paramValue != "" {

	} else {
		http.Error(w, "Query argument revision is required, but not found", http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "revision", r.URL.Query(), &params.Revision)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter revision: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetModuleAtRevision(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// WorkerSubscribe operation middleware
func (siw *ServerInterfaceWrapper) WorkerSubscribe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.WorkerSubscribe(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// WorkerUnsubscribe operation middleware
func (siw *ServerInterfaceWrapper) WorkerUnsubscribe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid UuidParam

	err = runtime.BindStyledParameter("simple", false, "uuid", chi.URLParam(r, "uuid"), &uuid)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter uuid: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.WorkerUnsubscribe(w, r, uuid)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CheckWorker operation middleware
func (siw *ServerInterfaceWrapper) CheckWorker(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid UuidParam

	err = runtime.BindStyledParameter("simple", false, "uuid", chi.URLParam(r, "uuid"), &uuid)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter uuid: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CheckWorker(w, r, uuid)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// WorkerLoadUpdate operation middleware
func (siw *ServerInterfaceWrapper) WorkerLoadUpdate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid UuidParam

	err = runtime.BindStyledParameter("simple", false, "uuid", chi.URLParam(r, "uuid"), &uuid)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter uuid: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.WorkerLoadUpdate(w, r, uuid)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// ForwardWebhook operation middleware
func (siw *ServerInterfaceWrapper) ForwardWebhook(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "domain" -------------
	var domain DomainPathParam

	err = runtime.BindStyledParameter("simple", false, "domain", chi.URLParam(r, "domain"), &domain)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter domain: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "uuid" -------------
	var uuid UuidParam

	err = runtime.BindStyledParameter("simple", false, "uuid", chi.URLParam(r, "uuid"), &uuid)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter uuid: %s", err), http.StatusBadRequest)
		return
	}

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ForwardWebhook(w, r, domain, uuid)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/library", wrapper.GetModuleAtRevision)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/subscribers", wrapper.WorkerSubscribe)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/subscribers/{uuid}", wrapper.WorkerUnsubscribe)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/subscribers/{uuid}", wrapper.CheckWorker)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/subscribers/{uuid}/load", wrapper.WorkerLoadUpdate)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/webhooks/{domain}/{uuid}", wrapper.ForwardWebhook)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/6N9I57/GAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
