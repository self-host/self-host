// Package malgomaj provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package malgomaj

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get worker status
	// (GET /v1/status)
	GetStatus(w http.ResponseWriter, r *http.Request)
	// Add a new Task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/status", wrapper.GetStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xW3W/bNhD/Vw7sHlpAlmTno5ne0q3rinVNsKTIgMwozuRZYiORGknF8QL/7wNJyY4/",
	"0q5vezIt3h3vfve7j0fGddNqRcpZVjyyilCQCcc/R28fWmko/BFkuZGtk1qxgp0r+PX6+nIk0BE42ZB1",
	"2LQpSxg9YNPWxIqNegE3JBKYjOGCO5jk4xPIXxeTsyLP4d3v1yxhllfUoH/GLVuva52RqmSr1Sphhv7u",
	"yLo3WsjoykdaXKO980eulSPl/BHbtpYcvYPZF+u9fHxitzW6JePkEAyKWiry57XDJ3meJ6zBB9l0DStO",
	"8/hfqvg/TwbnpHJUkmGrhAndoFRbZliz7L8mu9EkrHKu3UfzIhywTuGmIgVSQWcJXEXg0N6BtEAPxDtH",
	"AtACBuihNZqT6Ax51LfDm2mx9L9zbRp0rGCzpaOD7mySjULI6MXllq09nf6Dnn0h7tiQIGlIsOJ2bTGJ",
	"Tkz35BNWoyo7LCP4ykN7yxypUnvpDYzx0wGnW6NLg83nrpNiG3k8mRCOz8QIj/BsdJzPxiOc0dnoaDI5",
	"OyU6nZ/Oxiyk+AOp0lWsODoNGX76d+89qzvD6TPXgv4DqDt4rJm25soTAHZi2X5qGsi/TRRPe3Aa0FpZ",
	"Kn/yJFloc0fG02DzsjMdRV9sq5WNufxFm5kUgtQ+BT9qB1jXekHCm23J+DiDeeReJvVQvFeOjML6isw9",
	"mbfGaLNvahACG6SAgtgqYZ8Udq7SRv5D4pDaPdZSgJch5fpSBm5I+L9Y2zSgG2s6xHPl0HV2v7xrjQce",
	"uK4IeGcMKQdeAl5iWRoq0dfVkCf76mkPO0426ZbKnR6zrzeEneQHP6bBaeKdkW555Z2PTr5BK/l552nX",
	"Nypvaua/blgV+kUgglRzvR/TixdwQzXXDQ1k0PO55BJrEJp3DSkXYdTzcPvx4udzuKJ6Xmnr4DKyD24C",
	"geD88n36VyCo5KRsYLvC4Na7yw+jozQfaVUvWcI6U/fO2SLLdEsqMjfVpsx6bZv1SqFpSBcq9Fvvs4Td",
	"k7ExuDwdR23/ALaSFewozdPc1w26KqCY3Y8zu6ZBSW4fo3fkoBcJpkxA5L2IV1fDzValTPL8u8bLD4bm",
	"Ph3ZZphmPVGz/oUD5Xzxm4/uOB8/Z2LtU7ZVO0Hp6NtKm3pfJewkhvR1jUMF/pS/rLjdYu4tY9PVNGG2",
	"axo0yx7t2JA2oDssrZftP4SK8Inz0y2Wr7YHEncuBCAoWkAY97vJ+8kQOuqvNkvC8vkon+wR2bBErA5n",
	"ftuTq45zsjaFc3jpLcqaxCvom7efzxx5RQI65WQdCs0vRiO/GIFticu5JAGzZbha70UQh6W32usPFhey",
	"rmFGYKizJGAhXaU7B7G3SFWCoejGVnHzivid7Rpo0PGKrJ8Iz61zhwDqZbONYODs/56fvqzm2NUHKBT2",
	"qbg8edhwjXDYoxY0q7S+g54ZSUBxeAw4Kp8DVEtXSVWm31kIe+wdqiCyPo73Z81FYyFKGy5jy31sjXaa",
	"63pVZNljvF/5polG4qymYRgGmQhHj0wcJbsd6HIQTdarWC8XmjubrgYvto2NJ699J07HxVn+4+me2Zge",
	"+PTHB0+h6Tr23fSkqedoP2MiLqvp6t8AAAD//0CJJOGTDAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
