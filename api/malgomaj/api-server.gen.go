// Package malgomaj provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package malgomaj

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get worker status
	// (GET /v1/status)
	GetStatus(w http.ResponseWriter, r *http.Request)
	// Add a new Task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/status", wrapper.GetStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWX2/bNhD/Kgd2Dy0gS7KTuJne0q3rinVNsKTIgMwozuRZYiORGknF8QJ/94GkZMex",
	"065vexJFHo93v/vdnwfGddNqRcpZVjywilCQCcs/R2/vW2ko/Aiy3MjWSa1Ywc4U/Hp1dTES6AicbMg6",
	"bNqUJczyihr0N9yqJVYw64xUJVsnjO6xaWu/t9FcwDWJBCZjOOcOJvn4BPLXxeS0yHN49/sVW68TZujv",
	"jqx7o4WMpnyk5RXaW7/kWjlSzi+xbWvJ0RuYfbHeyodHxrRGt2ScHJxBUUtFfr2x6iTP84Q1eC+brmHF",
	"NI//UsX/PBk8kspRSca7JHSDUu2oYc2q3032Iaica/fRPA8LrFO4rkiBVNBZAlcROLS3IC3QPfHOkQC0",
	"gAF6aI3mJDpDHvVd9+ZarPx3oU2DjhVsvnJ00JxtsFEIGa242NG1d6ff0PMvxN0mQNKQYMXNRmMSjZjt",
	"ySesRlV2WEbwlYf2hjlSpfbSWxjj1gGjW6NLg83nrpNiF3k8mRCOT8UIj/B0dJzPxyOc0+noaDI5nRJN",
	"F9P5mIUQfyBVuooVR9MQ4ce/e+9Z3RlOn7kW9B9AfYLHhmkbrjwC4Ikvu0/N1l7XLlE87cFpQGtlqfzK",
	"k2SpzS0ZT4Pty850FG2xrVY2xvIXbeZSCFL7FPyoHWBd6yUJr7Yl4/0M6pF7mdRD8V45MgrrSzJ3ZN4a",
	"o82+qkEIbJACCmLrhH1S2LlKG/kPiUPX7rCWArwMKdenMnBDwv9ibdOAbszp4M+lQ9fZ/fSuNR544Koi",
	"4J0xpBx4CXiJZWmoRJ9XQ5zsK/aIhMfJNtxSuekx+3pBeBL8YMcsGE28M9KtLr3x0cg3aCU/6zzt+kLl",
	"Vc397pZVoV4EIki10Ps+vXgB11Rz3dBABr1YSC6xBqF515ByEUa9CKcfz38+g0uqF5W2Di4i++A6EAjO",
	"Lt6nfwWCSk7KBrYrDGa9u/gwOkrzkVb1iiWsM3VvnC2yTLekInNTbcqsv22z/lIoGtKFDP3W+yxhd2Rs",
	"dC5Px/G2fwBbyQp2lOZp7vMGXRVQzO7Gmd3QoCS3j9E7ctCLBFUmIPJexKPL4WQnUyZ5/l3t5QdDCx+O",
	"bNtMs56oWf/CgXQ+/817d5yPn1OxsSnbyZ1w6ejbl7b5vk7YSXTp6zcOJfhj/rLiZoe5N4zN1rOE2a5p",
	"0Kx6tGNB2oLusLRett8IGeED57tbTF9tDwTuTAhAULSE0O6fBu8nQ+ioP9oOCavnvXw0R2TDELE+HPld",
	"Sy47zsnaFM7gpdcoaxKvoC/evj9z5BUJ6JSTdUg0PxiN/GAEtiUuF5IEzFfhaDP8QGyWXmt/f9C4lHUN",
	"cwJDnSUBS+kq3TmItUWqEgxFM3aSm1fEb23XQIOOV2R9R3hunDsEUC+bbQUDZ//3/PRptcCuPkChME/F",
	"4cnDhhuEwxy1pHml9S30zEgCisNjwFH5GKBauUqqMv3ORNhj75AFkfWxvT+rLioLXtpwGEvuQ2u001zX",
	"6yLLHuL52hdNNBLnNQ3NMMhEOHpkYit5WoEuBtFkM4r1cqG4s9l6sGJX2Xjy2lfidFyc5j9O99TG8MCn",
	"Pz54Cs02vj8NT5p6jvY9JuKynq3/DQAA//9rtiOlkwwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
