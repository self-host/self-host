// Package malgomaj provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package malgomaj

import (
	"encoding/json"
	"fmt"

	"github.com/pkg/errors"
)

const (
	BasicAuthScopes = "BasicAuth.Scopes"
)

// Status defines model for Status.
type Status struct {

	// The current load (aggregated deadlines)
	Load int64 `json:"load"`
}

// NewTask defines model for NewTask.
type NewTask struct {
	Deadline int    `json:"deadline"`
	Domain   string `json:"domain"`

	// Optional. When in use the task is executed as a HTTP procedure.
	Http *struct {
		Body    []byte               `json:"body"`
		Headers NewTask_Http_Headers `json:"headers"`
	} `json:"http,omitempty"`
	Language    NewTaskLanguage `json:"language"`
	ProgramUuid string          `json:"program_uuid"`
	SourceCode  []byte          `json:"source_code"`
}

// CreateTaskJSONBody_Http_Headers defines parameters for CreateTask.
type CreateTaskJSONBody_Http_Headers struct {
	AdditionalProperties map[string]string `json:"-"`
}

// CreateTaskJSONBodyLanguage defines parameters for CreateTask.
type CreateTaskJSONBodyLanguage string

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody NewTask

// Getter for additional properties for CreateTaskJSONBody_Http_Headers. Returns the specified
// element and whether it was found
func (a CreateTaskJSONBody_Http_Headers) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CreateTaskJSONBody_Http_Headers
func (a *CreateTaskJSONBody_Http_Headers) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CreateTaskJSONBody_Http_Headers to handle AdditionalProperties
func (a *CreateTaskJSONBody_Http_Headers) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CreateTaskJSONBody_Http_Headers to handle AdditionalProperties
func (a CreateTaskJSONBody_Http_Headers) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
